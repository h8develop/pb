This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-23T17:46:15.209Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.firebaserc
.gitignore
bot/.gitignore
bot/app.js
bot/Dockerfile
bot/energyUpdate.js
bot/Makefile
bot/package.json
bot/passiveIncomeUpdate.js
bot/supabase.js
bot/testSupabase.js
firebase.json
index.html
jsconfig.json
package.json
postcss.config.js
README.md
src/api/app.js
src/api/users.js
src/App.vue
src/assets/main.css
src/components/DailyMissionsModal.vue
src/components/ScoreProgress.vue
src/components/TheMenu.vue
src/main.js
src/router/index.js
src/services/supabase.js
src/services/telegram.js
src/stores/app.js
src/stores/score.js
src/stores/userStore.js
src/views/FriendsView.vue
src/views/HomeView.vue
src/views/Shop.vue
src/views/TasksView.vue
tailwind.config.js
vite.config.js

================================================================
Repository Files
================================================================

================
File: .firebaserc
================
{
  "projects": {
    "default": "pbprojeck-87266"
  }
}

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
firebase-debug.log*
firebase-debug.*.log*

# Firebase cache
.firebase/

# Firebase config

# Uncomment this if you'd like others to create their own Firebase project.
# For a team working on the same Firebase project(s), it is recommended to leave
# it commented so all members can deploy to the same project(s) in .firebaserc.
# .firebaserc

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage

# nyc test coverage
.nyc_output

# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (http://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity



# dataconnect generated files
.dataconnect

dist

================
File: bot/.gitignore
================
node_modules
.env

================
File: bot/app.js
================
import { Telegraf, Markup } from 'telegraf'

const token = '8124471087:AAGp_FGoAR3D-jMtzpGKlEG_DDNGz4Y69vo'
const webAppUrl = 'https://pbprojeck-87266.web.app'

const bot = new Telegraf(token)

bot.command('start', (ctx) => {
  ctx.reply(
    'Hello! Press to start the app',
    Markup.inlineKeyboard([
      Markup.button.webApp('Open mini app', `${webAppUrl}?ref=${ctx.payload}`),
    ])
  )
})

bot.launch()

================
File: bot/Dockerfile
================
FROM node:16-alpine
WORKDIR /app
COPY package*.json ./
RUN npm ci
COPY . .  
ENV PORT=3000
EXPOSE $PORT
CMD ["npm", "start"]

================
File: bot/energyUpdate.js
================
// bot/energyUpdate.js
import cron from 'node-cron';
import supabase from './supabase.js';

// Логирование при запуске скрипта
console.log(`[${new Date().toISOString()}] Запуск скрипта восстановления энергии`);

// Расписание: каждую минуту
cron.schedule('* * * * *', async () => {
  console.log(`[${new Date().toISOString()}] Выполнение запланированной задачи восстановления энергии`);
  try {
    const { data: users, error } = await supabase
      .from('users')
      .select('id, energy, max_energy, last_energy_update');

    if (error) {
      console.error('Ошибка при получении пользователей:', error);
      return;
    }

    const currentTime = new Date();
    const updatePromises = users.map(user => {
      const lastUpdate = new Date(user.last_energy_update);
      const timeDiff = (currentTime - lastUpdate) / 1000; // разница в секундах
      const energyToAdd = Math.floor(timeDiff / 60); // 1 энергия каждые 60 секунд
      if (energyToAdd > 0) {
        const newEnergy = Math.min(user.energy + energyToAdd, user.max_energy);
        return supabase
          .from('users')
          .update({
            energy: newEnergy,
            last_energy_update: currentTime.toISOString(),
          })
          .eq('id', user.id);
      }
      return Promise.resolve();
    });

    await Promise.all(updatePromises);
    console.log('Энергия пользователей успешно обновлена');
  } catch (err) {
    console.error('Ошибка в запланированной задаче:', err);
  }
});

================
File: bot/Makefile
================
build-tgbot:
	docker build -t tgbot .

run-tgbot:
	docker run -d -p 3000:3000 --name tgbot --rm tgbot

================
File: bot/package.json
================
{
  "name": "bot",
  "version": "1.0.0",
  "main": "app.js",
  "type": "module",
  "scripts": {
  "start": "concurrently \"node -r dotenv/config app.js\" \"node -r dotenv/config energyUpdate.js\" \"node -r dotenv/config passiveIncomeUpdate.js\""
},

  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "concurrently": "^9.1.0",
    "telegraf": "^4.16.3",
    "express": "^4.18.2", 
    "@supabase/supabase-js": "^2.0.0", 
    "node-cron": "^3.0.0",
    "dotenv": "^16.4.5"
  }
}

================
File: bot/passiveIncomeUpdate.js
================
// bot/passiveIncomeUpdate.js
import cron from 'node-cron';
import supabase from './supabase.js';

console.log(`[${new Date().toISOString()}] Запуск скрипта пассивного дохода`);

cron.schedule('0 * * * *', async () => {
  console.log(`[${new Date().toISOString()}] Начисление пассивного дохода`);
  try {
    const { data: users, error } = await supabase
      .from('users')
      .select('id, score')
      .eq('has_golden_trinket', true);

    if (error) {
      console.error('Ошибка при получении пользователей:', error);
      return;
    }

    const updatePromises = users.map(user => {
      const newScore = user.score + 100;

      console.log(`Пользователь ID ${user.id}: начислено 100 монет`);

      return supabase
        .from('users')
        .update({
          score: newScore,
        })
        .eq('id', user.id);
    });

    await Promise.all(updatePromises);

    console.log('Пассивный доход успешно начислен');
  } catch (err) {
    console.error('Ошибка в запланированной задаче:', err);
  }
});

================
File: bot/supabase.js
================
// bot/supabase.js
import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// Загрузка переменных окружения из .env файла
dotenv.config();

const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_SERVICE_ROLE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!SUPABASE_URL || !SUPABASE_SERVICE_ROLE_KEY) {
  throw new Error('SUPABASE_URL и SUPABASE_SERVICE_ROLE_KEY обязательны.');
}

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY);
export default supabase;

================
File: bot/testSupabase.js
================
// bot/testSupabase.js
import supabase from './supabase.js';

(async () => {
  try {
    const { data, error } = await supabase.from('users').select('*').limit(1);
    if (error) {
      console.error('Ошибка:', error);
    } else {
      console.log('Данные:', data);
    }
  } catch (err) {
    console.error('Ошибка выполнения запроса:', err);
  }
})();

================
File: firebase.json
================
{
  "hosting": {
    "public": "dist",
    "ignore": [
      "firebase.json",
      "**/.*",
      "**/node_modules/**"
    ],
    "rewrites": [
      {
        "source": "**",
        "destination": "/index.html"
      }
    ]
  }
}

================
File: index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" href="/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="viewport" content="width=device-width, user-scalable=no" />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css"
      integrity="sha512-Kc323vGBEqzTmouAECnVceyQqyqdsSiqLQISBL29aUW4U/M7pSPA/gEUZQqv1cwx4OnYxTxve5UMg5GT6L4JJg=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />
    <script src="https://telegram.org/js/telegram-web-app.js"></script>
    <title>goldenBUST</title>
  </head>
  <body>
    <div id="app" style="position: relative"></div>
    <script type="module" src="/src/main.js"></script>
  </body>
</html>

================
File: jsconfig.json
================
{
  "compilerOptions": {
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "exclude": ["node_modules", "dist"]
}

================
File: package.json
================
{
  "name": "vue-project",
  "version": "0.0.0",
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "@supabase/supabase-js": "^2.45.4",
    "dotenv": "^16.4.5",
    "express": "^4.21.1",
    "lodash.debounce": "^4.0.8",
    "node-cron": "^3.0.3",
    "pinia": "^2.1.7",
    "rollup": "^4.27.3",
    "vue": "^3.4.29",
    "vue-router": "^4.3.3"
  },
  "devDependencies": {
    "@esbuild/win32-x64": "^0.24.0",
    "@vitejs/plugin-vue": "^5.0.5",
    "autoprefixer": "^10.4.20",
    "esbuild": "^0.24.0",
    "postcss": "^8.4.49",
    "tailwindcss": "^3.4.15",
    "vite": "^5.3.1"
  }
}

================
File: postcss.config.js
================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: README.md
================
# Lizzard Clicker!

================
File: src/api/app.js
================
// src/api/app.js
import supabase from '../services/supabase';
import { useTelegram } from '../services/telegram';

export async function getOrCreateUser() {
  const { user } = useTelegram();
  const telegramId = Number(user.id);

  const { data: existingUser, error } = await supabase
    .from('users')
    .select()
    .eq('telegram', telegramId)
    .single();

  if (existingUser) {
    return existingUser;
  }

  const newUser = {
    telegram: telegramId,
    friends: {},
    tasks: {},
    score: 0,
    energy: 1000,
    max_energy: 1000,
    multitap_level: 0, // Убедитесь, что уровень мультитапа установлен в 0
    last_energy_update: new Date().toISOString(), // Добавьте поле для отслеживания времени обновления энергии
  };
  

  const { data: insertedUser, error: insertError } = await supabase
    .from('users')
    .insert(newUser)
    .select()
    .single();

  if (insertError) {
    console.error('Ошибка при создании нового пользователя:', insertError);
    return null;
  }

  return insertedUser;
}

export async function fetchTasks() {
  try {
    const { data, error } = await supabase.from('tasks').select('*');
    if (error) {
      console.error('Ошибка при получении задач:', error);
      return [];
    }
    return data;
  } catch (err) {
    console.error('Ошибка при получении задач:', err);
    return [];
  }
}

export async function completeTask(user, task) {
  try {
    // Проверяем, выполнена ли задача ранее
    if (user.tasks && user.tasks[task.id]) {
      console.log('Задача уже выполнена');
      return;
    }

    // Обновляем список выполненных задач пользователя
    const updatedTasks = { ...user.tasks, [task.id]: true };

    // Начисляем вознаграждение пользователю
    const newScore = user.score + task.amount;

    // Обновляем данные пользователя в базе данных
    const { error } = await supabase
      .from('users')
      .update({ tasks: updatedTasks, score: newScore })
      .eq('id', user.id);

    if (error) {
      console.error('Ошибка при обновлении данных пользователя:', error);
    } else {
      console.log('Задача успешно выполнена и награда начислена');
    }
  } catch (err) {
    console.error('Ошибка при выполнении задачи:', err);
  }
}

================
File: src/api/users.js
================
// src/api/users.js
import supabase from '../services/supabase';

export async function registerRef(userName, refId) {
  try {
    // Получаем данные реферера
    const { data: referrerData, error: referrerError } = await supabase
      .from('users')
      .select('friends')
      .eq('telegram', refId)
      .single();

    if (referrerError) throw referrerError;

    // Обновляем список друзей реферера
    const updatedFriends = { ...referrerData.friends };
    updatedFriends[userName] = true;

    const { error: updateError } = await supabase
      .from('users')
      .update({ friends: updatedFriends })
      .eq('telegram', refId);

    if (updateError) throw updateError;

    console.log('Реферал успешно зарегистрирован!');
  } catch (error) {
    console.error('Ошибка при регистрации реферала:', error.message);
  }
}

================
File: src/App.vue
================
<template>
  <main
    v-if="loaded"
    style="
      padding: 20px;
      margin-top: 30px;
      scroll-behavior: smooth;
      overflow-x: hidden;
      height: calc(100vh - 100px); /* Adjust based on the height of TheMenu */
      overflow-y: auto; /* Enable vertical scrolling */
    "
  >
    <div class="">
      <RouterView />
    </div>
  </main>
  <TheMenu />
</template>

<script setup>
import { RouterView } from "vue-router";
import TheMenu from "./components/TheMenu.vue";
import { onMounted, ref } from "vue";
import { useAppStore } from "@/stores/app";
import { useTelegram } from "@/services/telegram";
import { useScoreStore } from "@/stores/score";
const scoreStore = useScoreStore();
scoreStore.loadUserData();

const loaded = ref(false);
const app = useAppStore();

const { tg } = useTelegram();

const urlParams = new URLSearchParams(window.location.search);

app.init(urlParams.get("ref")).then(() => {
  loaded.value = true;
});

onMounted(() => {
  tg.ready();

  tg.expand();
});
</script>

================
File: src/assets/main.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html,
body {
  font-family: "Poppins", sans-serif;
  margin: 0;
  height: 100%;
  padding: 0;
  width: 100%;
  display: flex;
  justify-content: center;
  background: linear-gradient(180deg, #000000 0.3%, #ff8c00 50%, #ffdd57 100%);
  overflow-y: hidden;
  overflow-x: hidden;
  /* font-family: "Balsamiq Sans", cursive; */
  color: #fff; /* Устанавливаем цвет текста */
}
.header {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  margin-bottom: 1rem;
}

.header img {
  width: 50px;
  height: 50px;
  margin-right: 14px;
}

.score {
  font-size: 36px;
  font-weight: bold;
}

.circle {
  position: relative;
  margin-bottom: 1rem;
  display: flex;
  justify-content: center;
}

.game-container {
  width: 200px;
  margin: 0 auto;
}

.circle img {
  width: 200px;
  height: 200px;
  border-radius: 50%;
  box-shadow: 0px 0px 16px 0px rgba(138, 143, 254, 0.05);
  transition: transform 0.2s ease-in-out;
  --tiltX: 0deg;
  --tiltY: 0deg;
  transform: rotateX(var(--tiltX)) rotateY(var(--tiltY));
}

.plus-one {
  position: absolute;
  font-family: Inter;
  text-shadow: 0px 0px 4px rgba(234, 182, 64, 0.25);
  font-size: 24px;
  font-weight: 800;
  background: linear-gradient(180deg, #e8c547 0%, #ef882b 100%);
  background-clip: text;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  pointer-events: none;
  user-select: none;
  animation: move-up 2s forwards;
}
/*МЕНЮЮЮЮЮЮЮЮЮ*/
.menu {
  background: rgba(42, 41, 46, 0.3); /* Полупрозрачный фон */
  display: flex;
  align-items: center;
  position: fixed;
  bottom: 8px;
  /* width: 100%; */
  left: 1.3rem;
  right: 1.3rem;
  justify-content: space-between;
  height: 60px;
  border-radius: 20px;
  font-size: 1.5rem;
  padding: 10px;
  gap: 2px;
  z-index: 10000;
}

.menu-button {
  color: #ffffff; /* Белый цвет текста */
  cursor: pointer;
  padding: 8px 15px; /* Уменьшенные отступы для меньшего фона */
  flex: 1; /* Равное распределение кнопок по ширине */
  text-align: center; /* Центрируем текст и иконки */
  border-radius: 8px; /* Немного уменьшили закругление углов */
  transition: background-color 0.3s, color 0.3s;
}

.menu-button:hover {
  background-color: rgba(255, 255, 255, 0.1); /* Лёгкий фон при наведении */
}

.menu-button.active {
  background-color: rgba(
    255,
    255,
    255,
    0.15
  ); /* Полупрозрачный белый фон для активной вкладки */
  color: #ffffff; /* Цвет текста остаётся белым */
}

/* === /NEW === */

@keyframes move-up {
  0% {
    opacity: 1;
    transform: translateY(0);
  }

  100% {
    opacity: 0;
    transform: translateY(-50px);
  }
}

.game {
  position: relative;
  min-height: 100vh;
  /* padding: 1rem; */
}

.page {
  /* width: 100vw; */
  /* height: calc(100vh - 80px); */
  /* position: relative; */
  /* min-height: 100vh; */
  height: 100%;
  display: flex;

  flex-direction: column;
  justify-content: space-around;
  align-items: center;
  padding-left: 10em;
  padding-right: 10em;
  margin-bottom: 40px;
}

.progress {
  position: relative;
}

.progress-level {
  text-align: center;
  margin-bottom: 0.5rem;
  color: #fff;
  font-weight: normal;
  display: flex;
  justify-content: space-between;
}

.progress-container {
  position: relative;
  width: 100%;
  height: 6px;
  border-radius: 25px;
  margin-bottom: 1rem;
  background: #4b402e;
  overflow: hidden;
}

.progress-value {
  background: #fff;
  position: absolute;
  left: 0;
  top: 0;
  bottom: 0;
  transition: 0.2s width ease;
}

.text-content {
  color: #fff;
}

.text-content h1,
.text-content h3 {
  text-align: center;
  margin-bottom: 1rem;
}

.list {
}

.list-item {
  background: #2a292e;
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 0.5rem 1rem;
  border-radius: 20px;
  margin-bottom: 1rem;
}

.list-btn {
  background: #fff;
  color: #000;
  border-radius: 20px;
  padding: 0 0.5rem;
  text-decoration: none;
  margin-left: 1rem;
}

.list-btn.done {
  background: #008800;
  color: #fff;
}

.referal {
  padding: 0.5rem 1rem;
  border-radius: 20px;
  background: gold;
  border: none;
}

.center {
  display: flex;
  justify-content: center;
  margin-bottom: 1rem;
}
/* мои изменения в ксс идут отсюда */
.earnings {
  text-align: center;
  margin: 10px 0;
}

.earnings p {
  display: inline; /* Делаем текстовым элементом в строке */
  white-space: nowrap; /* Убираем перенос текста на новую строку */
  font-size: 15px; /* Настроим размер шрифта по необходимости */
}

/* Стили для счетчика тапов */
.tap-counter {
  display: flex;
  align-items: center;
  font-size: 16px;
  color: #fff;
  /* margin-top: 10px; */
}

.tap-icon {
  width: 24px; /* Ширина изображения */
  height: 24px; /* Высота изображения */
  /* margin-right: 8px; Отступ справа от изображения */
}

.home-container {
  text-align: center;
  color: #ffffff;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 10px; /* Расстояние между элементами */
}

.top-bar {
  display: flex;
  align-items: center;
  gap: 4px;
  justify-content: space-between;
  margin-bottom: 20px;
}
.profile {
  display: flex;
  align-items: center;
  gap: 8px;
}
.avatar {
  width: 30px;
  height: 30px;
  border-radius: 50%;
}
.username {
  font-size: 14px;
  margin-right: 50px;
}

.bot-title {
  font-size: 30px;
  font-weight: bold;
  flex-grow: 1; /* Расширяет заголовок, чтобы он был по центру */
  text-align: center;
}

.contest-container {
  /* position: absolute;
  bottom: 160px;
  right: 8rem; */
  align-items: center;
  justify-content: space-between;
  background: rgba(0, 0, 0, 0.25); /* Полупрозрачный фон */
  border-radius: 15px; /* Закругленные углы */
  padding: 10px 20px; /* Внутренние отступы */
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2); /* Тень */
  position: relative;
  /* width: 15%; Ширина на весь контейнер */
}

.contest-image {
  /* width: 100%; */
  width: 46px;
  border-radius: 10px;
  position: absolute;
  top: -34px;
  left: 40%;
  right: 50%;
  animation: beat 1.25s infinite alternate;
}
@keyframes beat {
  to {
    transform: scale(1.4);
  }
}

.timer {
  margin-top: 10px;
  font-size: 16px;
  color: #ffdd57; /* Цвет таймера */
}

.valuta-icon {
  width: 40px; /* Настройте размер иконки */
  height: 40px;
  margin-bottom: 5px; /* Отступ снизу, чтобы отделить от текста */
}

.earning-item {
  font-size: 14px;
  margin-left: 8px;
}

.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 10001;
}

.modal-content {
  background-color: #fff;
  padding: 20px;
  border-radius: 8px;
  width: 80%;
  max-width: 500px;
  text-align: center;
}

.close-button {
  background-color: #f0a500;
  border: none;
  padding: 10px 20px;
  border-radius: 5px;
  color: white;
  cursor: pointer;
  margin-top: 10px;
}

.candy {
  position: relative;
  margin: 10px;
  padding: 0 6px 8px;
  font-family: "Roboto", cursive;
  box-sizing: border-box;
  /* font-weight: bold; */
  /* font-size: 32px; */
  color: #fff;
  z-index: 1;
  cursor: pointer;
  outline: none;
  overflow: hidden;
  border-style: solid;
  border-color: #fe4495;
  border-width: 3px 3px 4px;
  /* text-shadow: 3px 2px 0 rgba(0, 0, 0, 0.3); */
  border-radius: 40px;
  background: linear-gradient(to top, #fe4495, #d5095f);
  box-shadow: 0 6px 3px -3px rgba(0, 0, 0, 0.75);
  /* transition: all 0.25s cubic-bezier(1, -0.4, 0, 1.4); */
  /* animation: bounce 4s ease-out 0s infinite normal both; */
}

@keyframes bounce {
  2%,
  6% {
    transform: rotate(-5deg);
  }
  4%,
  8% {
    transform: rotate(5deg);
  }
  0%,
  10% {
    transform: scale(0.8);
  }
}

@keyframes bounceMin {
  2%,
  6% {
    transform: rotate(-5deg) scale(0.8);
  }
  4%,
  8% {
    transform: rotate(5deg) scale(0.8);
  }
  0%,
  10% {
    transform: scale(0.8);
  }
}

.candy.blue {
  border-color: #3ba7f7;
  background: linear-gradient(to top, #3ba7f7, #0172fd);
}

.candy.green {
  border-color: #4ec445;
  background: linear-gradient(to top, #4ec445, #069a09);
}

.candy:hover,
.candy:focus {
  transform: scale(0.8);
  filter: brightness(66%);
  animation: bounceMin 4s ease-out 0s infinite normal both;
}

.candy:before,
.candy:after {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
}

.candy:before {
  height: 60%;
  width: 100%;
  border-radius: 0 0 25% 25%;
  background: linear-gradient(
    to top,
    rgba(255, 255, 255, 0.6),
    rgba(255, 255, 255, 0.2) 20%
  );
}

.candy:after {
  width: 9px;
  height: 18px;
  margin: 4px 0 0 16px;
  background: linear-gradient(
    to top,
    rgba(255, 255, 255, 0.2),
    rgba(255, 255, 255, 0.8)
  );
  border-radius: 50%;
  transform: rotate(50deg);
}
.candy:active {
  transition: all 0.25s cubic-bezier(1, -0.4, 0, 1.4);
  animation: bounce 1s ease-out 0s 1 normal both;
  transform: translateY(4px);
}

================
File: src/components/DailyMissionsModal.vue
================
<template>
  <div class="modal-overlay" @click="close">
    <div class="modal-content daily-modal-content relative" @click.stop>
      <button class="absolute top-1 right-2 text-2xl" @click="close">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="1em"
          height="1em"
          viewBox="0 0 24 24"
        >
          <path
            fill="none"
            stroke="currentColor"
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-miterlimit="10"
            stroke-width="1.5"
            d="m7.757 16.243l8.486-8.486m0 8.486L7.757 7.757"
          />
        </svg>
      </button>
      <h2>Заходи каждый день и забирай бонус!</h2>
      <div class="missions-grid grid grid-cols-3 mt-4 gap-2">
        <button
          v-for="day in 12"
          :key="day"
          :class="[
            'mission-button',
            'menu-button inline-flex flex-col items-center',
            { completed: day < currentLevel, active: day === currentLevel },
          ]"
          @click="collectReward(day)"
          :disabled="!canCollect(day)"
        >
          <span class="font-bold">
            {{ getButtonText(day) }}
          </span>
          <img
            src="https://cdn-icons-png.flaticon.com/512/5525/5525147.png"
            alt=""
            class="h-10 w-10"
          />
          <span
            class="text-sm font-normal mt-1 py-0.5 px-4 bg-yellow-500 rounded-full"
          >
            {{ day * 10 }}
          </span>
        </button>
      </div>
      <!-- Claim Button -->
      <div>
        <button class="mission-button menu-button mt-4">Получить</button>
      </div>
    </div>

    <!--  -->
  </div>
</template>

<script setup>
import { ref, computed, onMounted } from "vue";
import { useUserStore } from "@/stores/userStore";
import { useScoreStore } from "@/stores/score";
import { defineEmits } from "vue";

const emit = defineEmits(["close"]);

const userStore = useUserStore();
const scoreStore = useScoreStore();

const currentLevel = ref(1);

onMounted(async () => {
  await userStore.loadUserData();
  currentLevel.value = userStore.dailyMissionLevel;
});

function close() {
  emit("close");
}

function getButtonText(day) {
  if (day < currentLevel.value) {
    return "Выполнено";
  } else if (day === currentLevel.value) {
    return `День ${day}`;
  } else {
    return `День ${day}`;
  }
}

function getReward(day) {
  return day * 10; // Формула расчета награды за день
}

function canCollect(day) {
  return day === currentLevel.value;
}

async function collectReward(day) {
  if (!canCollect(day)) return;

  const reward = getReward(day);
  await scoreStore.add(reward); // Используем метод add для добавления очков

  await userStore.updateDailyMission(day + 1);

  currentLevel.value = day + 1;
}
</script>


<style scoped>
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5); /* Полупрозрачный фон */
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.modal-content {
  background-color: rgba(
    42,
    41,
    46,
    0.9
  ); /* Полупрозрачный фон, аналогичный меню */
  padding: 20px 30px;
  border-radius: 12px;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
  text-align: center;
  max-width: 700px; /* Увеличенная максимальная ширина */
  width: 95%; /* Увеличенная ширина */
  height: auto; /* Автоматическая высота */
  max-height: 90vh; /* Максимальная высота до 90% от высоты окна */
  overflow-y: auto; /* Добавить прокрутку, если содержимое превышает высоту */
}

.daily-modal-content {
  padding: 30px 40px; /* Увеличенные внутренние отступы */
}

.menu-button {
  background: rgba(255, 255, 255, 0.15); /* Полупрозрачный белый фон */
  color: #ffffff; /* Белый цвет текста */
  border: none;
  padding: 10px 20px;
  border-radius: 8px;
  cursor: pointer;
  font-size: 16px;
  transition: background-color 0.3s, color 0.3s;
}

.menu-button:hover {
  background-color: rgba(
    255,
    255,
    255,
    0.25
  ); /* Более яркий фон при наведении */
}

.close-button {
  margin-top: 20px;
}

/* Стили для кнопок миссий */
.missions-grid {
  /* display: flex;
  flex-wrap: wrap;
  gap: 10px;
  margin: 20px 0; */
}

.mission-button {
  /* flex: 1 0 45%; Сделать кнопки более широкими */
  /* padding: 10px; */
  border: none;
  /* border-radius: 8px; */
  font-size: 12px;
  cursor: pointer;
  transition: background-color 0.3s, color 0.3s;
}

.mission-button.completed {
  background-color: gray;
  color: white;
}

.mission-button.active {
  background-color: #968a4c;
  color: white;
}
</style>

================
File: src/components/ScoreProgress.vue
================
<template>
  <div class="progress">
    <h4 class="progress-score">
    </h4>
  </div>
</template>

<script setup>
import { useScoreStore } from '@/stores/score'

const store = useScoreStore()
</script>

================
File: src/components/TheMenu.vue
================
<template>
  <div class="menu">
    <RouterLink to="/" custom v-slot="{ isActive, navigate }">
      <i
        class="menu-button fa fa-home"
        :class="{ active: isActive }"
        @click="navigate"
        aria-hidden="true"
      ></i>
    </RouterLink>
    
    <RouterLink to="/shop" custom v-slot="{ isActive, navigate }">
      <i
        class="menu-button fa fa-shopping-cart"
        :class="{ active: isActive }"
        @click="navigate"
        aria-hidden="true"
      ></i>
    </RouterLink>

    <RouterLink to="/friends" custom v-slot="{ isActive, navigate }">
      <i
        class="menu-button fa fa-users"
        :class="{ active: isActive }"
        @click="navigate"
        aria-hidden="true"
      ></i>
    </RouterLink>

    <RouterLink to="/tasks" custom v-slot="{ isActive, navigate }">
      <i
        class="menu-button fa fa-bolt"
        :class="{ active: isActive }"
        @click="navigate"
        aria-hidden="true"
      ></i>
    </RouterLink>
  </div>
</template>

<script>
import { RouterLink } from 'vue-router'
</script>

================
File: src/main.js
================
import './assets/main.css'

import { createApp } from 'vue'
import { createPinia } from 'pinia'

import App from './App.vue'
import router from './router'

const app = createApp(App)

app.use(createPinia())
app.use(router)

app.mount('#app')

================
File: src/router/index.js
================
import { createRouter, createWebHistory } from 'vue-router';
import HomeView from '../views/HomeView.vue';
import TasksView from '../views/TasksView.vue'; 
import FriendsView from '../views/FriendsView.vue';
import Shop from '../views/Shop.vue';

const routes = [
  {
    path: '/',
    name: 'home',
    component: HomeView,
  },
  {
    path: '/tasks',
    name: 'tasks',
    component: TasksView, 
  },
  {
    path: '/friends',
    name: 'friends',
    component: FriendsView,
  },
  {
    path: '/shop',
    name: 'shop',
    component: Shop,
  },
];

const router = createRouter({
  history: createWebHistory(import.meta.env.BASE_URL),
  routes,
});

export default router;

================
File: src/services/supabase.js
================
// src/services/supabase.js
import { createClient } from '@supabase/supabase-js';

const SUPABASE_URL= "https://irymwiidzovsezjnbiux.supabase.co"
const SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImlyeW13aWlkem92c2V6am5iaXV4Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTczMTE1ODkzMCwiZXhwIjoyMDQ2NzM0OTMwfQ.ZbWuQrnVvrhpXCqKt-kYYrpsNiDGkDEn1WSiXaQ8Dpg"

if (!SUPABASE_URL || !SUPABASE_ANON_KEY) {
  throw new Error('VITE_SUPABASE_URL и VITE_SUPABASE_ANON_KEY обязательны.');
}

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
export default supabase;

================
File: src/services/telegram.js
================
export function useTelegram() {
  const tg = window.Telegram.WebApp;

  const isLocalTest = !tg.initDataUnsafe?.user;
  const mockUser = {
    id: 666,
    username: "mock_user",
    first_name: "Mock",
    last_name: "User",
  };

  if (isLocalTest) {
    console.warn("Используются мокированные данные пользователя");
  }

  return {
    tg,
    user: isLocalTest ? mockUser : tg.initDataUnsafe?.user || null,
  };
}

================
File: src/stores/app.js
================
// src/stores/app.js
import { defineStore } from 'pinia';
import { useScoreStore } from './score';
import { useTelegram } from '@/services/telegram';
import { registerRef } from '@/api/users';
import {
  getOrCreateUser,
  fetchTasks,
  completeTask,
} from '@/api/app';

export const useAppStore = defineStore('app', {
  state: () => ({
    user: {},
    tasks: [],
  }),
  actions: {
    async init(ref) {
      const { user: telegramUser } = useTelegram();

      this.user = await getOrCreateUser();

      const scoreStore = useScoreStore();

      if (typeof scoreStore.setScore === 'function') {
        scoreStore.setScore(this.user.score);
        scoreStore.setUserId(this.user.id);
      } else {
        console.error('Ошибка: метод setScore не найден в scoreStore');
      }

      // Если есть реферальный код и он не принадлежит самому пользователю
      if (ref && +ref !== +this.user.telegram) {
        await registerRef(telegramUser?.first_name ?? 'kto', ref);
      }
    },

    async completeTask(task) {
      await completeTask(this.user, task);
      // Обновляем данные пользователя после выполнения задачи
      this.user = await getOrCreateUser();
    },

    async fetchTasks() {
      this.tasks = await fetchTasks();
    },
  },
});

================
File: src/stores/score.js
================
import { defineStore } from 'pinia';
import supabase from '@/services/supabase';
import { useTelegram } from '@/services/telegram';

export const useScoreStore = defineStore('score', {
  state: () => ({
    userId: null,
    score: 0,
    energy: 1000,
    maxEnergy: 1000,
    multitapLevel: 0,
    hasGoldenTrinket: false,
    lastEnergyUpdate: null,
  }),

  actions: {
    setUserId(id) {
      this.userId = id;
    },

    setScore(newScore) {
      this.score = newScore;
    },

    async loadUserData() {
      const { user } = useTelegram();
      if (!user || !user.id) {
        console.error("Ошибка: объект user или его id не определены");
        return;
      }

      const telegramId = Number(user.id);
      try {
        const { data, error } = await supabase
          .from('users')
          .select(
            'id, score, energy, max_energy, multitap_level, has_golden_trinket, last_energy_update, purchased_items'
          )
          .eq('telegram', telegramId)
          .single();

        if (error) {
          console.error('Ошибка при загрузке данных пользователя из Supabase:', error);
        } else {
          this.userId = data.id;
          this.score = data.score ?? 0;
          this.energy = data.energy ?? 0;
          this.maxEnergy = data.max_energy ?? 1000;
          this.multitapLevel = data.multitap_level ?? 0;
          this.hasGoldenTrinket = data.has_golden_trinket ?? false;
          this.lastEnergyUpdate = data.last_energy_update
            ? new Date(data.last_energy_update)
            : new Date();
          this.purchasedItems = data.purchased_items || {}; // Загружаем купленные предметы
        }
      } catch (err) {
        console.error('Ошибка при загрузке данных пользователя:', err);
      }
    },

    async restoreEnergy() {
      const currentTime = new Date();
      const elapsedMinutes = Math.floor((currentTime - new Date(this.lastEnergyUpdate)) / (1000 * 60));

      if (elapsedMinutes > 0) {
        const energyToAdd = Math.min(elapsedMinutes, this.maxEnergy - this.energy);
        this.energy = Math.min(this.energy + energyToAdd, this.maxEnergy);
        this.lastEnergyUpdate = currentTime.toISOString();

        await supabase
          .from('users')
          .update({
            energy: this.energy,
            last_energy_update: this.lastEnergyUpdate,
          })
          .eq('id', this.userId);
      }
    },

    async add(taps = 1) {
      await this.restoreEnergy();

      const coinsPerTap = this.multitapLevel > 0 ? this.multitapLevel + 1 : 1;

      if (this.energy >= taps) {
        this.score += taps * coinsPerTap;
        this.energy -= taps;

        await supabase
          .from('users')
          .update({
            score: this.score,
            energy: this.energy,
            last_energy_update: this.lastEnergyUpdate,
          })
          .eq('id', this.userId);
      } else {
        alert('У вас недостаточно энергии!');
      }
    },

    async updatePurchasedItems(newItemId) {
      if (!this.userId) return;

      try {
        const { data, error } = await supabase
          .from('users')
          .select('purchased_items')
          .eq('id', this.userId)
          .single();

        if (error) {
          console.error('Ошибка при получении purchased_items:', error);
          return;
        }

        const currentPurchasedItems = data.purchased_items || {};
        const updatedPurchasedItems = { ...currentPurchasedItems, [newItemId]: true };

        const { updateError } = await supabase
          .from('users')
          .update({ purchased_items: updatedPurchasedItems })
          .eq('id', this.userId);

        if (updateError) {
          console.error('Ошибка при обновлении purchased_items:', updateError);
        } else {
          console.log('purchased_items успешно обновлено:', updatedPurchasedItems);
        }
      } catch (err) {
        console.error('Ошибка при обновлении purchased_items:', err);
      }
    },

    async updateScoreInSupabase() {
      if (!this.userId) return;

      try {
        const { error } = await supabase
          .from('users')
          .update({
            score: this.score,
            max_energy: this.maxEnergy,
            energy: this.energy,
            multitap_level: this.multitapLevel,
            has_golden_trinket: this.hasGoldenTrinket,
            last_energy_update: this.lastEnergyUpdate
              ? this.lastEnergyUpdate.toISOString()
              : null,
          })
          .eq('id', this.userId);

        if (error) {
          console.error('Ошибка при обновлении счёта в Supabase:', error);
        }
      } catch (err) {
        console.error('Ошибка при обновлении счёта в Supabase:', err);
      }
    },
  },
});

================
File: src/stores/userStore.js
================
import { defineStore } from 'pinia';
import supabase from '../services/supabase';
import { useTelegram } from '../services/telegram';

export const useUserStore = defineStore('user', {
  state: () => ({
    userId: null,
    dailyMissionLevel: 1,
    dailyMissionDate: null,
  }),

  actions: {
    async loadUserData() {
      const { user } = useTelegram();
      if (!user || !user.id) {
        console.error('Пользователь не авторизован');
        return;
      }

      const telegramId = Number(user.id);

      const { data, error } = await supabase
        .from('users')
        .select('id, daily_mission_level, daily_mission_date')
        .eq('telegram', telegramId)
        .single();

      if (error) {
        console.error('Ошибка загрузки данных пользователя:', error);
        return;
      }

      this.userId = data.id;
      this.dailyMissionLevel = data.daily_mission_level || 1;
      this.dailyMissionDate = data.daily_mission_date;
    },

    async updateDailyMission(newLevel) {
      if (!this.userId) {
        console.error('userId не определен');
        return;
      }

      const today = new Date().toISOString().split('T')[0]; // Формат YYYY-MM-DD

      const { error } = await supabase
        .from('users')
        .update({
          daily_mission_level: newLevel,
          daily_mission_date: today,
        })
        .eq('id', this.userId);

      if (error) {
        console.error('Ошибка обновления ежедневной миссии:', error);
      } else {
        this.dailyMissionLevel = newLevel;
        this.dailyMissionDate = today;
      }
    },
  },
});

================
File: src/views/FriendsView.vue
================
<template>
  <div class="flex items-center flex-col p-4">
    <h1 class="text-center text-2xl font-extrabold dark:text-white mb-2">
      GoldenBust
    </h1>
    <div class="rounded-2xl p-10 bg-[#2a292e4d] relative mt-28">
      <img
        src="https://cdn-icons-png.flaticon.com/512/9592/9592247.png"
        alt=""
        class="absolute bottom-1 -right-7 w-28 rotate-12"
      />
      <img
        src="https://cdn-icons-png.flaticon.com/512/9592/9592247.png"
        alt=""
        class="absolute -top-20 left-1 w-28 rotate-45"
      />

      <p class="mb-2 text-lg">
        Поделись ссылкой с друзьями и получи 20% с их дохода
      </p>
      <div class="flex gap-4">
        <button
          type="button"
          @click="copy"
          class="text-white bg-[#ffffff1a] hover:bg-blue-800 focus:outline-none focus:ring-blue-300 font-medium rounded-2xl text-sm w-full px-12 py-2.5 text-center me-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"
        >
          <span style="font-size: 12px">
            {{ referalText }}
          </span>
        </button>
        <!-- <button
          type="button"
          @click="copy"
          class="text-white bg-[#ffffff1a] hover:bg-blue-800 focus:outline-none focus:ring-blue-300 font-medium rounded-2xl text-sm px-6 py-2.5 text-center me-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="2em"
            height="2em"
            viewBox="0 0 24 24"
          >
            <path
              fill="currentColor"
              d="M6.6 11.397c0-2.726 0-4.089.843-4.936c.844-.847 2.201-.847 4.917-.847h2.88c2.715 0 4.073 0 4.916.847c.844.847.844 2.21.844 4.936v4.82c0 2.726 0 4.089-.844 4.936c-.843.847-2.201.847-4.916.847h-2.88c-2.716 0-4.073 0-4.917-.847s-.843-2.21-.843-4.936z"
            />
            <path
              fill="currentColor"
              d="M4.172 3.172C3 4.343 3 6.229 3 10v2c0 3.771 0 5.657 1.172 6.828c.617.618 1.433.91 2.62 1.048c-.192-.84-.192-1.996-.192-3.66v-4.819c0-2.726 0-4.089.843-4.936c.844-.847 2.201-.847 4.917-.847h2.88c1.652 0 2.8 0 3.638.19c-.138-1.193-.43-2.012-1.05-2.632C16.657 2 14.771 2 11 2S5.343 2 4.172 3.172"
              opacity="0.5"
            />
          </svg>
        </button> -->
      </div>
    </div>
    <!-- Friends list -->
    <div
      class="rounded-2xl bg-[#2a292e4d] bg-card text-card-foreground shadow-sm w-full mt-4"
    >
      <div class="flex flex-col space-y-1.5 p-6">
        <h3 class="text-2xl font-semibold leading-none tracking-tight">
          Друзья
        </h3>
      </div>
      <div class="p-6 pt-0">
        <span v-if="!friends.length"> У тебя еще нет друзей </span>
        <ul class="space-y-4" v-if="friends.length > 0">
          <li class="flex items-center space-x-4" v-for="friend in friends">
            <span
              class="relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full"
            >
              <img
                src="https://cdn-icons-png.flaticon.com/512/3781/3781973.png"
                alt="avatar"
              />
            </span>
            <div class="flex-1 min-w-0">
              <p class="text-sm font-medium text-white truncate">
                {{ friend.id }}
              </p>
              <p class="text-sm text-white truncate">{{ friend.status }}</p>
            </div>
          </li>
        </ul>
      </div>
    </div>
  </div>
</template>

<script setup>
import { useTelegram } from "@/services/telegram";
import { useAppStore } from "@/stores/app";
import { ref, computed } from "vue";

const app = useAppStore();
const { user } = useTelegram();

const referalText = ref("Твоя персональная ссылка");
const friends_mock = [
  {
    id: "gitam",
    name: true,
  },
  {
    id: "gitam",
    name: true,
  },
];

// Безопасная обработка данных друзей
const friends = computed(() => {
  // Проверка на существование данных о пользователе и друзьях
  if (app.user && app.user.friends) {
    return Object.keys(app.user.friends).map((id) => ({
      id,
      name: app.user.friends[id] || "Неизвестный друг", // Подстраховка на случай отсутствия имени
    }));
  }
  return [];
});

function copy() {
  const userId = user?.id || "unknown";
  navigator.clipboard.writeText(`https://t.me/testikbt_bot?start=${userId}`);
  referalText.value = "Поделись!";
}
</script>
<style scoped>
button {
  background: linear-gradient(to top, #fe4495, #d5095f);
  box-shadow: 0 6px 3px -3px rgba(0, 0, 0, 0.75);
  text-shadow: 3px 2px 0 rgba(0, 0, 0, 0.3);
  font-weight: bold;
}
button:active {
  transition: all 0.25s cubic-bezier(1, -0.4, 0, 1.4);
  animation: bounce 1s ease-out 0s 1 normal both;
  transform: translateY(4px);
}
</style>

================
File: src/views/HomeView.vue
================
<!-- src/views/HomeView.vue -->
<template>
  <div class="home-container">
    <!-- Верхняя панель с названием бота, профилем и кнопкой "О токене" -->
    <div class="flex gap-4 justify-between items-center mb-4">
      <div
        class="rounded-full flex flex-col items-center bg-[#2a292e] py-0.5 pr-2.5 pl-1.5 border border-transparent text-sm text-white transition-all shadow-sm"
      >
        <div>
          <img
            alt="user"
            :src="userAvatar"
            class="h-8 w-8 rounded-full object-cover object-center"
          />
        </div>
        <span class="text-[12px]">
          {{ userName }}
        </span>
      </div>
      <h1 class="bot-title">GoldenBust</h1>
      <div
        class="max-w-full leading-none font-normal m-1 px-2 py-2 rounded-full bg-[#2a292e] text-xs text-white"
        role="button"
        @click="openTokenModal"
      >
        О токене
      </div>
    </div>

    <!-- Валюта и доходы -->
    <div class="header mt-2">
      <div class="flex">
        <img src="../assets/valuta.png" alt="coin" class="valuta-icon" />
        <h2 class="score" id="score">{{ scoreStore.score }}</h2>
      </div>
      <div class="earnings flex gap-2">
        <div class="earning-item inline-flex items-center">
          <img
            src="https://cdn-icons-png.flaticon.com/512/9382/9382196.png"
            alt=""
            style="height: 16px; width: 16px"
          />
          <p>{{ hourlyEarnings }} голда / час</p>
        </div>
        <div class="earning-item inline-flex items-center">
          <img
            src="https://www.svgrepo.com/show/32426/tap.svg"
            alt=""
            style="height: 16px; width: 16px"
          />
          <p>{{ tapEarnings }} голда / тап</p>
        </div>
      </div>
    </div>

    <!-- Монетка -->
    <div class="circle">
      <img
        @click="increment"
        ref="img"
        id="circle"
        src="../assets/tap_bols.png"
        alt="Click Target"
        :class="{ 'disabled': scoreStore.energy === 0 }"
        :style="{ cursor: scoreStore.energy > 0 ? 'pointer' : 'not-allowed' }"
      />
    </div>


    <div
      class="flex gap-2 justify-between items-baseline absolute bottom-24 w-full pl-7 pb-9 pr-5"
    >
      <!-- Счетчик энергии -->
      <div class="tap-counter">
        <img
          src="/src/assets/white_coin_energy.png"
          alt="Icon"
          class="tap-icon"
        />
        <p>
          <b>{{ scoreStore.energy }} </b> / {{ scoreStore.maxEnergy }}
        </p>
      </div>

      <!-- Контейнер для конкурса -->
      <div class="contest-container cursor-pointer" @click="goToDailyMissions">
        <img
          src="https://phones.mintmobile.com/wp-content/uploads/2024/09/Apple_iPhone_16_Pro_black_titanium_front_back1.png"
          alt="Конкурс"
          class="contest-image"
        />
        <div class="timer">
          <p>Розыгрыш</p>
        </div>
      </div>
    </div>

    <!-- Кнопка для ежедневных миссий -->
    <button
      class="daily-missions-button menu-button"
      @click="openDailyMissions"
    >
      Ежедневные миссии
    </button>

    <!-- Модальное окно для ежедневных миссий -->
    <DailyMissionsModal
      v-if="isDailyModalOpen"
      @close="isDailyModalOpen = false"
    />

    <!-- Модальное окно для "О токене" -->
    <div v-if="isTokenModalOpen" class="modal-overlay" @click="closeTokenModal">
      <div class="modal-content" @click.stop>
        <h2>О токене</h2>
        <p>
          Здесь можно разместить информацию о токене, его особенности и другие
          важные детали.
        </p>
        <button class="menu-button close-button" @click="closeTokenModal">
          Закрыть
        </button>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, computed, onMounted } from 'vue';
import { useScoreStore } from "@/stores/score";
import { useTelegram } from "@/services/telegram";
import DailyMissionsModal from "@/components/DailyMissionsModal.vue";

const scoreStore = useScoreStore();
const { user } = useTelegram();
const img = ref(null);

// Данные пользователя
const userAvatar = ref("../assets/default-avatar.png");
const userName = ref("Имя пользователя");

// Проверяем, есть ли данные пользователя из Telegram
if (user) {
  userAvatar.value = user.photo_url || "../assets/default-avatar.png";
  userName.value = `${user.first_name || ""} ${user.last_name || ""}`.trim();
}

// Управление модальным окном для "О токене"
const isTokenModalOpen = ref(false);

// Управление модальным окном для ежедневных миссий
const isDailyModalOpen = ref(false);

// Добавляем вычисляемое свойство tapEarnings
const tapEarnings = computed(() => {
  return scoreStore.multitapLevel > 0 ? scoreStore.multitapLevel + 1 : 1;
});

// Значения доходов
const hourlyEarnings = computed(() => {
  return scoreStore.hasGoldenTrinket ? 100 : 0;
});

function openTokenModal() {
  isTokenModalOpen.value = true;
}

function closeTokenModal() {
  isTokenModalOpen.value = false;
}

function openDailyMissions() {
  isDailyModalOpen.value = true;
}
function goToDailyMissions() {
  window.open("https://t.me/testimGOLD/2", "_blank");
}

// Функция для обработки клика по монетке
async function increment(event) {
  const rect = event.target.getBoundingClientRect();
  const offsetX = event.clientX - rect.left - rect.width / 2;
  const offsetY = event.clientY - rect.top - rect.height / 2;

  const DEG =45;
  const tiltX = (offsetY / rect.height) * DEG;
  const tiltY = (offsetX / rect.width) * -DEG;
  img.value.style.transform = `rotateX(${tiltX}deg) rotateY(${tiltY}deg)`;

  setTimeout(() => {
    img.value.style.transform = "rotateX(0deg) rotateY(0deg)";
  }, 300);

  const plusOne = document.createElement("div");
  plusOne.classList.add("plus-one");
  plusOne.textContent = `+${tapEarnings.value}`;
  plusOne.style.left = `${event.clientX - rect.left}px`;
  plusOne.style.top = `${event.clientY - rect.top}px`;
  img.value.parentElement.appendChild(plusOne);
  setTimeout(() => plusOne.remove(), 2000);

  // Обновляем расчет количества тапов
  const taps = 1; // За один тап пользователь тратит 1 энергию
  await scoreStore.add(taps);
}

// Загружаем данные пользователя при монтировании компонента
onMounted(() => {
  scoreStore.loadUserData();
});
</script>

<style scoped>
/* Стили для модального окна "О токене" и "Ежедневных миссий" */
.disabled {
  opacity: 0.5;
  pointer-events: none;
}
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5); /* Полупрозрачный фон */
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.modal-content {
  background-color: rgba(
    42,
    41,
    46,
    0.9
  ); /* Полупрозрачный фон, аналогичный меню */
  padding: 20px 30px;
  border-radius: 12px;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
  text-align: center;
  max-width: 700px; /* Увеличенная максимальная ширина */
  width: 95%; /* Увеличенная ширина */
  height: auto; /* Автоматическая высота */
  max-height: 90vh; /* Максимальная высота до 90% от высоты окна */
  overflow-y: auto; /* Добавить прокрутку, если содержимое превышает высоту */
}

.daily-modal-content {
  padding: 30px 40px; /* Увеличенные внутренние отступы */
}

.menu-button {
  background: rgba(255, 255, 255, 0.2); /* Полупрозрачный белый фон */
  color: #ffffff; /* Белый цвет текста */
  border: none;
  padding: 10px 20px;
  border-radius: 8px;
  cursor: pointer;
  font-size: 16px;
  transition: background-color 0.3s, color 0.3s;
}

.menu-button:hover {
  background-color: rgba(
    255,
    255,
    255,
    0.2
  ); /* Более яркий фон при наведении */
}

.close-button {
  margin-top: 20px;
}

/* Стили для кнопок миссий */
.missions-grid {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
  margin: 20px 0;
}

.mission-button {
  flex: 1 0 50%; /* Сделать кнопки более широкими */
  padding: 10px;
  border: none;
  border-radius: 8px;
  font-size: 16px;
  cursor: pointer;
  transition: background-color 0.3s, color 0.3s;
}

.mission-button.completed {
  background-color: gray;
  color: white;
}

.mission-button.active {
  background-color: gold;
  color: black;
}

.daily-missions-button {
  background: rgba(42, 41, 46, 0.3); /* Полупрозрачный фон */
  display: flex;
  align-items: center;
  position: absolute;
  bottom: 78px;
  left: 1.3rem;
  right: 1.3rem;
  justify-content: space-around;
  height: 50px;
  border-radius: 20px;
  font-size: 1.2rem;
  padding-top: 4px;
  padding-bottom: 4px;
  padding: 4px;
  background-image: url("https://cdn3d.iconscout.com/3d/premium/thumb/gift-box-3d-icon-download-in-png-blend-fbx-gltf-file-formats--present-surprise-package-new-year-party-pack-festival-days-icons-5740394.png?f=webp"),
    url("https://cdn3d.iconscout.com/3d/premium/thumb/gift-box-3d-icon-download-in-png-blend-fbx-gltf-file-formats--present-surprise-package-new-year-party-pack-festival-days-icons-5740394.png?f=webp");
  background-position: top right, top left;
  background-size: contain;
  background-repeat: no-repeat;
  z-index: 1;


}

.daily-missions-button:hover {
  /* background: rgba(42, 41, 46, 0.3); Полупрозрачный фон */
  /* animation: animate 10s linear infinite; */
  transform: scale(0.9);
}
@keyframes animate {
  0% {
    background-position: 0%;
  }
  100% {
    background-position: 400%;
  }
}
.daily-missions-button:before {
  content: "";
  position: absolute;
  top: -5px;
  left: -5px;
  right: -5px;
  bottom: -5px;
  z-index: -1;
  /* background: linear-gradient(45deg, #f15523, #ef3224, #7c3697); */
  background-size: 400%;
  border-radius: 40px;
  opacity: 0;
  transition: 0.5%;
}
.daily-missions-button:hover:before {
  filter: blur(20px);
  opacity: 1;
  animation: animate 8s linear infinite;
}
</style>

================
File: src/views/Shop.vue
================
<template>
  <div class="flex flex-col p-4">
    <h1 class="text-center text-2xl font-extrabold dark:text-white mb-2">
      GoldenBust Shop
    </h1>

    <div
      v-for="item in shopItems"
      :key="item.id"
      class="p-2 shadow-md hover:shadow-lg rounded-2xl mb-2 flex justify-between items-center"
      style="background: rgba(42, 41, 46, 0.3)"
    >
      <div class="p-2 flex items-center gap-2">
        <img
          :src="getImgURL(item.action)"
          alt="Item Icon"
          class="w-12 h-12 object-cover rounded-md"
        />
        <div class="text-left">
          <p class="font-semibold text-sm text-gray-100">
            {{ item.name }}
          </p>
          <p class="text-sm font-light mt-1">
            {{ item.description }}
          </p>
        </div>
      </div>

      <div class="flex justify-end min-w-24">
        <button
          class="candy green inline-flex w-full py-1 px-2 cursor-pointer items-center justify-center bg-red-500 shadow-sm hover:shadow-lg font-medium tracking-wider border-2 border-red-500 text-white rounded-full"
          @click="buyItem(item)"
          :disabled="!canBuyItem(item)"
        >
          <img
            src="https://cdn-icons-png.flaticon.com/512/272/272525.png"
            alt="Coin Icon"
            class="h-4 w-4"
          />
          <span class="text-sm font-light">
            &nbsp;{{ formatNumberWithK(item.cost) }}
          </span>
        </button>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref } from "vue";
import { useScoreStore } from "@/stores/score";
import supabase from "@/services/supabase";

const scoreStore = useScoreStore();

// Описание доступных предметов
const shopItems = ref([
  {
    id: 1,
    name: "Батарейка",
    description: "Восполни энергию до максимума",
    cost: 1000,
    action: "restoreEnergy",
  },
  {
    id: 2,
    name: "Аккумулятор",
    description: "Увеличивает максимальную энергию до 2000 тапов",
    cost: 10000,
    action: "increaseMaxEnergyTo2000",
  },
  {
    id: 3,
    name: "Путь самурая",
    description: "Кастомизируй внешний вид кнопки для кликов",
    cost: 1000000,
    action: "customButton",
  },
  {
    id: 4,
    name: "Двойная монета",
    description: "Увеличь количество коинов - два за тап",
    cost: 10000,
    action: "increaseMultitap",
  },
  {
    id: 5,
    name: "Электрощиток",
    description: "Увеличивает максимальную энергию до 4000 тапов",
    cost: 20000,
    action: "increaseMaxEnergyTo4000",
  },
  {
    id: 6,
    name: "Энергостанция",
    description: "Увеличивает максимальную энергию до 6000 тапов",
    cost: 30000,
    action: "increaseMaxEnergyTo6000",
  },
  {
    id: 7,
    name: "Золотой брелок",
    description: "Дает пассивный заработок в 100 монет каждый час",
    cost: 50000,
    action: "goldenTrinket",
  },
]);

// Проверка на доступность покупки
function canBuyItem(item) {
  if (scoreStore.purchasedItems[item.id] && ![1, 3].includes(item.id)) {
    return false; // Уникальные предметы уже куплены
  }
  return scoreStore.score >= item.cost;
}

// Форматирование чисел
function formatNumberWithK(number) {
  return number >= 1000 ? `${Math.round(number / 1000)}k` : number;
}

// Получение иконки предмета
function getImgURL(action) {
  return new URL(`/src/assets/icon-${action}.jpg`, import.meta.url).href;
}

// Покупка предмета
async function buyItem(item) {
  const purchasedItems = scoreStore.purchasedItems || {};

  // Проверяем, можно ли купить предмет
  if (!canBuyItem(item)) {
    alert("Недостаточно средств или предмет уже куплен!");
    return;
  }

  // Списание стоимости
  scoreStore.score -= item.cost;

  // Выполнение действия
  switch (item.action) {
    case "restoreEnergy":
      scoreStore.energy = scoreStore.maxEnergy;
      break;
    case "increaseMaxEnergyTo2000":
      if (scoreStore.maxEnergy < 2000) scoreStore.maxEnergy = 2000;
      break;
    case "increaseMaxEnergyTo4000":
      if (scoreStore.maxEnergy < 4000) scoreStore.maxEnergy = 4000;
      break;
    case "increaseMaxEnergyTo6000":
      if (scoreStore.maxEnergy < 6000) scoreStore.maxEnergy = 6000;
      break;
    case "customButton":
      alert("Функция кастомизации в разработке.");
      break;
    case "increaseMultitap":
      scoreStore.multitapLevel += 1;
      break;
    case "goldenTrinket":
      scoreStore.hasGoldenTrinket = true;
      break;
    default:
      alert("Неизвестное действие.");
  }

  // Обновление списка купленных предметов
  purchasedItems[item.id] = true;
  scoreStore.purchasedItems = purchasedItems;

  // Сохранение в Supabase
  const { error } = await supabase
    .from("users")
    .update({
      purchased_items: purchasedItems,
      score: scoreStore.score,
      max_energy: scoreStore.maxEnergy,
      energy: scoreStore.energy,
      multitap_level: scoreStore.multitapLevel,
      has_golden_trinket: scoreStore.hasGoldenTrinket,
    })
    .eq("id", scoreStore.userId);

  if (error) {
    console.error("Ошибка обновления данных в Supabase:", error);
    alert("Ошибка при сохранении данных. Попробуйте позже.");
    return;
  }

  alert("Покупка успешно завершена!");
}
</script>

<style scoped>
/* Добавлены стили для улучшенной визуализации */
.shop-container {
  padding: 20px;
}

button:disabled {
  background-color: #7e7e7e;
  cursor: not-allowed;
  opacity: 0.5;
}
</style>

================
File: src/views/TasksView.vue
================
<template>
  <div class="flex flex-col p-4">
    <h1 class="text-center text-2xl font-extrabold dark:text-white mb-2">
      GoldenBust
    </h1>
    <h3 v-if="app.tasks.length === 0" class="loading-text mt-4">
      Loading tasks...
    </h3>

    <div
      class="p-2 shadow-md hover:shodow-lg rounded-2xl mb-2 flex justify-between items-center"
      style="background: rgba(42, 41, 46, 0.3)"
      v-for="task in app.tasks"
      :key="task.id"
    >
      <div class="p-2 flex items-center gap-2">
        <img
          src="https://icon-library.com/images/gifts-icon/gifts-icon-3.jpg"
          alt=""
          class="w-8 h-8 rounded-md"
        />
        <div class="text-left">
          <p class="leading-none font-semibold text-sm text-gray-100 text-left">
            {{ task.title }}
          </p>
        </div>
      </div>
      <div class="flex justify-end min-w-24">
        <button
          class="candy green inline-flex w-full py-1 px-2 cursor-pointer items-center justify-center bg-red-500 shadow-sm hover:shadow-lg font-medium tracking-wider border-2 border-red-500 text-white rounded-full"
          @click.prevent="openTask(task)"
        >
          <img
            src="https://cdn-icons-png.flaticon.com/512/272/272525.png"
            alt=""
            class="h-4 w-4"
          />
          <span class="text-sm font-bold"> &nbsp;{{ task.amount }} </span>
        </button>
      </div>
    </div>
  </div>
  <!-- <div class="tasks-wrapper">
    <div class="text-content">
      <h1 class="tasks-header">Стань богаче</h1>
      <h3 v-if="app.tasks.length === 0" class="loading-text">Loading tasks...</h3>
      <ul class="list">
        <li class="list-item" v-for="task in app.tasks" :key="task.id">
          <span class="task-title">{{ task.title }}</span>
          <span>
            <a
              @click.prevent="openTask(task)"
              target="_blank"
              class="list-btn"
              :class="{ done: app.user?.tasks?.[task.id] }"
            >
              {{ task.amount }}
            </a>
          </span>
        </li>
      </ul>
    </div>
  </div> -->
</template>

<script setup>
import { useTelegram } from "@/services/telegram";
import { useAppStore } from "@/stores/app";
import { onMounted } from "vue";

const { tg } = useTelegram();
const app = useAppStore();

onMounted(() => {
  app.fetchTasks();
});

async function openTask(task) {
  await app.completeTask(task);
  if (task.url.includes("t.me")) {
    tg.openTelegramLink(task.url);
  } else {
    tg.openLink(task.url);
  }
}
</script>

<style scoped>
/* Оформление блока задач с полупрозрачным фоном */
.text-content {
  background-color: rgba(255, 255, 255, 0.2); /* Полупрозрачный белый фон */
  padding: 20px 30px;
  border-radius: 12px;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
  text-align: center;
  max-width: 400px;
  width: 100%;
}

/* Заголовок */
.tasks-header {
  font-size: 26px;
  font-weight: bold;
  margin-bottom: 16px;
  color: #ffffff;
}

/* Текст загрузки */
.loading-text {
  font-size: 18px;
  color: #777;
}

/* Стили списка */
.list {
  list-style: none;
  padding: 0;
  margin: 0;
}

.list-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 10px 15px;
  margin-bottom: 10px;
  background-color: rgba(255, 255, 255, 0.01);
  border-radius: 8px;
}

.list-item:hover {
  background-color: rgba(255, 255, 255, 0.2);
}

/* Название задачи */
.task-title {
  font-size: 16px;
  color: #f3f3f3;
}

/* Кнопки */
.list-btn {
  text-decoration: none;
  color: #000000;
  font-weight: bold;
  padding: 6px 12px;
  background-color: rgba(255, 255, 255, 0.2);
  border: none;
  border-radius: 8px;
  cursor: pointer;
}

.list-btn:hover {
  background-color: inherit;
}

.list-btn.done {
  color: #030303;
  background-color: inherit;
}

.list-btn.done:hover {
  background-color: #28a745;
  color: #fff;
}
</style>

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
export default {
  content: ["./index.html", "./src/**/*.{js,ts,jsx,tsx,vue}"],

  purge: ["./index.html", "./src/**/*.{vue,js,ts,jsx,tsx}"],
  theme: {
    extend: {},
  },
  plugins: [],
};

================
File: vite.config.js
================
import { fileURLToPath, URL } from 'node:url'

import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [
    vue(),
  ],
  resolve: {
    alias: {
      '@': fileURLToPath(new URL('./src', import.meta.url))
    }
  }
})
