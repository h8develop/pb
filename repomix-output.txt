This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-18T21:16:54.897Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.firebaserc
.gitignore
bot/.gitignore
bot/app.js
bot/Dockerfile
bot/energyUpdate.js
bot/Makefile
bot/package.json
bot/passiveIncomeUpdate.js
bot/supabase.js
bot/testSupabase.js
firebase.json
index.html
jsconfig.json
package.json
README.md
src/api/app.js
src/api/users.js
src/App.vue
src/assets/main.css
src/components/DailyMissionsModal.vue
src/components/ScoreProgress.vue
src/components/TheMenu.vue
src/main.js
src/router/index.js
src/services/supabase.js
src/services/telegram.js
src/stores/app.js
src/stores/score.js
src/stores/userStore.js
src/views/FriendsView.vue
src/views/HomeView.vue
src/views/Shop.vue
src/views/TasksView.vue
vite.config.js

================================================================
Repository Files
================================================================

================
File: .firebaserc
================
{
  "projects": {
    "default": "pbprojeck-87266"
  }
}

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
firebase-debug.log*
firebase-debug.*.log*

# Firebase cache
.firebase/

# Firebase config

# Uncomment this if you'd like others to create their own Firebase project.
# For a team working on the same Firebase project(s), it is recommended to leave
# it commented so all members can deploy to the same project(s) in .firebaserc.
# .firebaserc

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage

# nyc test coverage
.nyc_output

# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (http://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity



# dataconnect generated files
.dataconnect

dist

================
File: bot/.gitignore
================
node_modules
.env

================
File: bot/app.js
================
import { Telegraf, Markup } from 'telegraf'

const token = '8124471087:AAGp_FGoAR3D-jMtzpGKlEG_DDNGz4Y69vo'
const webAppUrl = 'https://pbprojeck-87266.web.app'

const bot = new Telegraf(token)

bot.command('start', (ctx) => {
  ctx.reply(
    'Hello! Press to start the app',
    Markup.inlineKeyboard([
      Markup.button.webApp('Open mini app', `${webAppUrl}?ref=${ctx.payload}`),
    ])
  )
})

bot.launch()

================
File: bot/Dockerfile
================
FROM node:16-alpine
WORKDIR /app
COPY package*.json ./
RUN npm ci
COPY . .  
ENV PORT=3000
EXPOSE $PORT
CMD ["npm", "start"]

================
File: bot/energyUpdate.js
================
import cron from 'node-cron';
import supabase from './supabase.js';

console.log(`[${new Date().toISOString()}] Запуск скрипта восстановления энергии`);

cron.schedule('* * * * *', async () => {
  console.log(`[${new Date().toISOString()}] Выполнение запланированной задачи`);
  try {
    const { data: users, error } = await supabase
      .from('users')
      .select('id, energy, max_energy');

    if (error) {
      console.error('Ошибка при получении пользователей:', error);
      return;
    }

    const updatePromises = users.map(user => {
      const newEnergy = Math.min(user.energy + 1, user.max_energy);

      console.log(`Пользователь ID ${user.id}: энергия была ${user.energy}, стала ${newEnergy}`);

      return supabase
        .from('users')
        .update({
          energy: newEnergy,
          last_energy_update: new Date().toISOString(),
        })
        .eq('id', user.id);
    });

    await Promise.all(updatePromises);

    console.log('Энергия пользователей успешно обновлена');
  } catch (err) {
    console.error('Ошибка в запланированной задаче:', err);
  }
});

================
File: bot/Makefile
================
build-tgbot:
	docker build -t tgbot .

run-tgbot:
	docker run -d -p 3000:3000 --name tgbot --rm tgbot

================
File: bot/package.json
================
{
  "name": "bot",
  "version": "1.0.0",
  "main": "app.js",
  "type": "module",
  "scripts": {
  "start": "concurrently \"node -r dotenv/config app.js\" \"node -r dotenv/config energyUpdate.js\" \"node -r dotenv/config passiveIncomeUpdate.js\""
},

  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "concurrently": "^9.1.0",
    "telegraf": "^4.16.3",
    "express": "^4.18.2", 
    "@supabase/supabase-js": "^2.0.0", 
    "node-cron": "^3.0.0",
    "dotenv": "^16.4.5"
  }
}

================
File: bot/passiveIncomeUpdate.js
================
// bot/passiveIncomeUpdate.js
import cron from 'node-cron';
import supabase from './supabase.js';

console.log(`[${new Date().toISOString()}] Запуск скрипта пассивного дохода`);

cron.schedule('0 * * * *', async () => {
  console.log(`[${new Date().toISOString()}] Начисление пассивного дохода`);
  try {
    const { data: users, error } = await supabase
      .from('users')
      .select('id, score')
      .eq('has_golden_trinket', true);

    if (error) {
      console.error('Ошибка при получении пользователей:', error);
      return;
    }

    const updatePromises = users.map(user => {
      const newScore = user.score + 100;

      console.log(`Пользователь ID ${user.id}: начислено 100 монет`);

      return supabase
        .from('users')
        .update({
          score: newScore,
        })
        .eq('id', user.id);
    });

    await Promise.all(updatePromises);

    console.log('Пассивный доход успешно начислен');
  } catch (err) {
    console.error('Ошибка в запланированной задаче:', err);
  }
});

================
File: bot/supabase.js
================
// bot/supabase.js
import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// Загрузка переменных окружения из .env файла
dotenv.config();

const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_SERVICE_ROLE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!SUPABASE_URL || !SUPABASE_SERVICE_ROLE_KEY) {
  throw new Error('SUPABASE_URL и SUPABASE_SERVICE_ROLE_KEY обязательны.');
}

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY);
export default supabase;

================
File: bot/testSupabase.js
================
// bot/testSupabase.js
import supabase from './supabase.js';

(async () => {
  try {
    const { data, error } = await supabase.from('users').select('*').limit(1);
    if (error) {
      console.error('Ошибка:', error);
    } else {
      console.log('Данные:', data);
    }
  } catch (err) {
    console.error('Ошибка выполнения запроса:', err);
  }
})();

================
File: firebase.json
================
{
  "hosting": {
    "public": "dist",
    "ignore": [
      "firebase.json",
      "**/.*",
      "**/node_modules/**"
    ],
    "rewrites": [
      {
        "source": "**",
        "destination": "/index.html"
      }
    ]
  }
}

================
File: index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" href="/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="viewport" content="width=device-width, user-scalable=no" />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css"
      integrity="sha512-Kc323vGBEqzTmouAECnVceyQqyqdsSiqLQISBL29aUW4U/M7pSPA/gEUZQqv1cwx4OnYxTxve5UMg5GT6L4JJg=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />
    <script src="https://telegram.org/js/telegram-web-app.js"></script>
    <title>goldenBUST</title>
  </head>
  <body>
    <div id="app"></div>
    <script type="module" src="/src/main.js"></script>
  </body>
</html>

================
File: jsconfig.json
================
{
  "compilerOptions": {
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "exclude": ["node_modules", "dist"]
}

================
File: package.json
================
{
  "name": "vue-project",
  "version": "0.0.0",
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "@supabase/supabase-js": "^2.45.4",
    "dotenv": "^16.4.5",
    "express": "^4.21.1",
    "lodash.debounce": "^4.0.8",
    "node-cron": "^3.0.3",
    "pinia": "^2.1.7",
    "vue": "^3.4.29",
    "vue-router": "^4.3.3"
  },
  "devDependencies": {
    "@vitejs/plugin-vue": "^5.0.5",
    "vite": "^5.3.1"
  }
}

================
File: README.md
================
# Lizzard Clicker!

================
File: src/api/app.js
================
// src/api/app.js
import supabase from '../services/supabase';
import { useTelegram } from '../services/telegram';

export async function getOrCreateUser() {
  const { user } = useTelegram();
  const telegramId = Number(user.id);

  const { data: existingUser, error } = await supabase
    .from('users')
    .select()
    .eq('telegram', telegramId)
    .single();

  if (existingUser) {
    return existingUser;
  }

  const newUser = {
    telegram: telegramId,
    friends: {},
    tasks: {},
    score: 0,
    energy: 1000,
    max_energy: 1000,
    multitap_level: 0, // Убедитесь, что уровень мультитапа установлен в 0
    last_energy_update: new Date().toISOString(), // Добавьте поле для отслеживания времени обновления энергии
  };
  

  const { data: insertedUser, error: insertError } = await supabase
    .from('users')
    .insert(newUser)
    .select()
    .single();

  if (insertError) {
    console.error('Ошибка при создании нового пользователя:', insertError);
    return null;
  }

  return insertedUser;
}

export async function fetchTasks() {
  try {
    const { data, error } = await supabase.from('tasks').select('*');
    if (error) {
      console.error('Ошибка при получении задач:', error);
      return [];
    }
    return data;
  } catch (err) {
    console.error('Ошибка при получении задач:', err);
    return [];
  }
}

export async function completeTask(user, task) {
  try {
    // Проверяем, выполнена ли задача ранее
    if (user.tasks && user.tasks[task.id]) {
      console.log('Задача уже выполнена');
      return;
    }

    // Обновляем список выполненных задач пользователя
    const updatedTasks = { ...user.tasks, [task.id]: true };

    // Начисляем вознаграждение пользователю
    const newScore = user.score + task.amount;

    // Обновляем данные пользователя в базе данных
    const { error } = await supabase
      .from('users')
      .update({ tasks: updatedTasks, score: newScore })
      .eq('id', user.id);

    if (error) {
      console.error('Ошибка при обновлении данных пользователя:', error);
    } else {
      console.log('Задача успешно выполнена и награда начислена');
    }
  } catch (err) {
    console.error('Ошибка при выполнении задачи:', err);
  }
}

================
File: src/api/users.js
================
// src/api/users.js
import supabase from '../services/supabase';

export async function registerRef(userName, refId) {
  try {
    // Получаем данные реферера
    const { data: referrerData, error: referrerError } = await supabase
      .from('users')
      .select('friends')
      .eq('telegram', refId)
      .single();

    if (referrerError) throw referrerError;

    // Обновляем список друзей реферера
    const updatedFriends = { ...referrerData.friends };
    updatedFriends[userName] = true;

    const { error: updateError } = await supabase
      .from('users')
      .update({ friends: updatedFriends })
      .eq('telegram', refId);

    if (updateError) throw updateError;

    console.log('Реферал успешно зарегистрирован!');
  } catch (error) {
    console.error('Ошибка при регистрации реферала:', error.message);
  }
}

================
File: src/App.vue
================
<template>
  <main class="game" v-if="loaded">
    <div class="page">
      <RouterView />
    </div>
    <TheMenu />
  </main>
</template>

<script setup>
import { RouterView } from 'vue-router'
import TheMenu from './components/TheMenu.vue'
import { onMounted, ref } from 'vue'
import { useAppStore } from '@/stores/app'
import { useTelegram } from '@/services/telegram'
import { useScoreStore } from '@/stores/score';
    const scoreStore = useScoreStore();
    scoreStore.loadUserData();

const loaded = ref(false)
const app = useAppStore()

const { tg } = useTelegram()

const urlParams = new URLSearchParams(window.location.search)

app.init(urlParams.get('ref')).then(() => {
  loaded.value = true
})

onMounted(() => {
  tg.ready()

  tg.expand()
})
</script>

================
File: src/assets/main.css
================
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html,body {
  font-family: 'Poppins', sans-serif;
  margin: 0;
  height: 100%;
  padding: 0;
  width: 100%;
  display: flex;
  justify-content: center;
  background: linear-gradient(180deg, #000000 0.3%, #ff8c00 50%, #ffdd57 100%); 
  overflow-y: hidden;
  overflow-x: hidden;
  color: #fff; /* Устанавливаем цвет текста */
}
.header {
  display: flex;
  align-items: center;
  justify-content: center;
  margin-bottom: 1rem;
}

.header img {
  width: 50px;
  height: 50px;
  margin-right: 14px;
}

.score {
  font-size: 36px;
  font-weight: bold;
}


.circle {
  position: relative;
  margin-bottom: 1rem;
  display: flex;
  justify-content: center;
}

.game-container {
  width: 200px;
  margin: 0 auto;
}

.circle img {
  width: 200px;
  height: 200px;
  border-radius: 50%;
  box-shadow: 0px 0px 16px 0px rgba(138, 143, 254, 0.05);
  transition: transform 0.2s ease;
  --tiltX: 0deg;
  --tiltY: 0deg;
  transform: rotateX(var(--tiltX)) rotateY(var(--tiltY));
}

.plus-one {
  position: absolute;
  font-family: Inter;
  text-shadow: 0px 0px 4px rgba(234, 182, 64, 0.25);
  font-size: 24px;
  font-weight: 800;
  background: linear-gradient(180deg, #e8c547 0%, #ef882b 100%);
  background-clip: text;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  pointer-events: none;
  user-select: none;
  animation: move-up 2s forwards;
}
/*МЕНЮЮЮЮЮЮЮЮЮ*/
.menu {
  background: rgba(42, 41, 46, 0.3); /* Полупрозрачный фон */
  display: flex;
  align-items: center;
  position: absolute;
  bottom: 0;
  left: 1.3rem;
  right: 1.3rem;
  justify-content: space-around;
  height: 60px;
  border-radius: 20px;
  font-size: 1.5rem;
}

.menu-button {
  color: #ffffff; /* Белый цвет текста */
  cursor: pointer;
  padding: 8px 15px; /* Уменьшенные отступы для меньшего фона */
  flex: 1; /* Равное распределение кнопок по ширине */
  text-align: center; /* Центрируем текст и иконки */
  border-radius: 8px; /* Немного уменьшили закругление углов */
  transition: background-color 0.3s, color 0.3s;
}

.menu-button:hover {
  background-color: rgba(255, 255, 255, 0.1); /* Лёгкий фон при наведении */
}

.menu-button.active {
  background-color: rgba(255, 255, 255, 0.15); /* Полупрозрачный белый фон для активной вкладки */
  color: #ffffff; /* Цвет текста остаётся белым */
}

/* === /NEW === */

@keyframes move-up {
  0% {
    opacity: 1;
    transform: translateY(0);
  }

  100% {
    opacity: 0;
    transform: translateY(-50px);
  }
}

.game {
  position: relative;
  padding: 1rem;
}

.page {
  width: 100vw;
  height: calc(100vh - 60px);
  display: flex;
  flex-direction: column;
  justify-content: space-around;
  align-items: center;
}

.progress {
  position: relative;
}

.progress-level {
  text-align: center;
  margin-bottom: 0.5rem;
  color: #fff;
  font-weight: normal;
  display: flex;
  justify-content: space-between;
}

.progress-container {
  position: relative;
  width: 100%;
  height: 6px;
  border-radius: 25px;
  margin-bottom: 1rem;
  background: #4b402e;
  overflow: hidden;
}

.progress-value {
  background: #fff;
  position: absolute;
  left: 0;
  top: 0;
  bottom: 0;
  transition: 0.2s width ease;
}

.text-content {
  color: #fff;
}

.text-content h1,
.text-content h3 {
  text-align: center;
  margin-bottom: 1rem;
}

.list {
}

.list-item {
  background: #2a292e;
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 0.5rem 1rem;
  border-radius: 20px;
  margin-bottom: 1rem;
}

.list-btn {
  background: #fff;
  color: #000;
  border-radius: 20px;
  padding: 0 0.5rem;
  text-decoration: none;
  margin-left: 1rem;
}

.list-btn.done {
  background: #008800;
  color: #fff;
}

.referal {
  padding: 0.5rem 1rem;
  border-radius: 20px;
  background: gold;
  border: none;
}

.center {
  display: flex;
  justify-content: center;
  margin-bottom: 1rem;
}
/* мои изменения в ксс идут отсюда */
.earnings {
  text-align: center;
  margin: 20px 0;
}

.earnings p {
  display: inline; /* Делаем текстовым элементом в строке */
  white-space: nowrap; /* Убираем перенос текста на новую строку */
  font-size: 15px; /* Настроим размер шрифта по необходимости */
}



/* Стили для счетчика тапов */
.tap-counter {
  display: flex;
  align-items: center;
  font-size: 16px;
  color: #fff;
  margin-top: 10px;
}

.tap-icon {
  width: 24px; /* Ширина изображения */
  height: 24px; /* Высота изображения */
  margin-right: 8px; /* Отступ справа от изображения */
}

.home-container {
  text-align: center;
  padding: 20px;
  color: #ffffff;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 10px; /* Расстояние между элементами */
}


.top-bar {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 20px;
}
.profile {
  display: flex;
  align-items: center;
  gap: 8px;
}
.avatar {
  width: 30px;
  height: 30px;
  border-radius: 50%;
}
.username {
  font-size: 14px;
  margin-right: 50px;
}

.bot-title {
  font-size: 30px;
  font-weight: bold;
  flex-grow: 1; /* Расширяет заголовок, чтобы он был по центру */
  text-align: center;

}

.contest-container {
  position: absolute;
  bottom: 160px;
  right: 8rem;
  align-items: center;
  justify-content: space-between;
  background: rgba(0, 0, 0, 0.25); /* Полупрозрачный фон */
  border-radius: 15px; /* Закругленные углы */
  padding: 10px 20px; /* Внутренние отступы */
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2); /* Тень */
  width: 15%; /* Ширина на весь контейнер */
}


.contest-image {
  width: 100%;
  max-width: 35px; /* Максимальная ширина изображения */
  border-radius: 10px;
}

.timer {
  margin-top: 10px;
  font-size: 16px;
  color: #ffdd57; /* Цвет таймера */
}

.valuta-icon {
  width: 40px; /* Настройте размер иконки */
  height: 40px;
  margin-bottom: 5px; /* Отступ снизу, чтобы отделить от текста */
}


.earning-item {
  font-size: 14px;
  margin-left: 8px;
}

.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.modal-content {
  background-color: #fff;
  padding: 20px;
  border-radius: 8px;
  width: 80%;
  max-width: 500px;
  text-align: center;
}

.close-button {
  background-color: #f0a500;
  border: none;
  padding: 10px 20px;
  border-radius: 5px;
  color: white;
  cursor: pointer;
  margin-top: 10px;
}

================
File: src/components/DailyMissionsModal.vue
================
<template>
  <div class="modal-overlay" @click="close">
    <div class="modal-content daily-modal-content" @click.stop>
      <h2>Заходи каждый день и забирай бонус!</h2>
      <div class="missions-grid">
        <button
          v-for="day in 12"
          :key="day"
          :class="['mission-button', 'menu-button', { completed: day < currentLevel, active: day === currentLevel }]"
          @click="collectReward(day)"
          :disabled="!canCollect(day)"
        >
          {{ getButtonText(day) }}
        </button>
      </div>
      <button class="menu-button close-button" @click="close">Закрыть</button>
    </div>
  </div>
</template>

<script setup>
import { ref, computed, onMounted } from 'vue';
import { useUserStore } from '@/stores/userStore';
import { useScoreStore } from '@/stores/score';
import { defineEmits } from 'vue';

const emit = defineEmits(['close']);

const userStore = useUserStore();
const scoreStore = useScoreStore();

const currentLevel = ref(1);

onMounted(async () => {
  await userStore.loadUserData();
  currentLevel.value = userStore.dailyMissionLevel;
});

function close() {
  emit('close');
}

function getButtonText(day) {
  if (day < currentLevel.value) {
    return 'Выполнено';
  } else if (day === currentLevel.value) {
    return `День ${day}: ${getReward(day)} коинов`;
  } else {
    return `День ${day}`;
  }
}

function getReward(day) {
  return day * 10;
}

function canCollect(day) {
  return day === currentLevel.value;
}

async function collectReward(day) {
  if (!canCollect(day)) return;

  const reward = getReward(day);
  await scoreStore.addScore(reward);

  await userStore.updateDailyMission(day + 1);

  currentLevel.value = day + 1;
}
</script>

<style scoped>
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5); /* Полупрозрачный фон */
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.modal-content {
  background-color: rgba(42, 41, 46, 0.9); /* Полупрозрачный фон, аналогичный меню */
  padding: 20px 30px;
  border-radius: 12px;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
  text-align: center;
  max-width: 700px; /* Увеличенная максимальная ширина */
  width: 95%; /* Увеличенная ширина */
  height: auto; /* Автоматическая высота */
  max-height: 90vh; /* Максимальная высота до 90% от высоты окна */
  overflow-y: auto; /* Добавить прокрутку, если содержимое превышает высоту */
}

.daily-modal-content {
  padding: 30px 40px; /* Увеличенные внутренние отступы */
}

.menu-button {
  background: rgba(255, 255, 255, 0.15); /* Полупрозрачный белый фон */
  color: #ffffff; /* Белый цвет текста */
  border: none;
  padding: 10px 20px;
  border-radius: 8px;
  cursor: pointer;
  font-size: 16px;
  transition: background-color 0.3s, color 0.3s;
}

.menu-button:hover {
  background-color: rgba(255, 255, 255, 0.25); /* Более яркий фон при наведении */
}

.close-button {
  margin-top: 20px;
}

/* Стили для кнопок миссий */
.missions-grid {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
  margin: 20px 0;
}

.mission-button {
  flex: 1 0 45%; /* Сделать кнопки более широкими */
  padding: 10px;
  border: none;
  border-radius: 8px;
  font-size: 16px;
  cursor: pointer;
  transition: background-color 0.3s, color 0.3s;
}

.mission-button.completed {
  background-color: gray;
  color: white;
}

.mission-button.active {
  background-color: gold;
  color: black;
}
</style>

================
File: src/components/ScoreProgress.vue
================
<template>
  <div class="progress">
    <h4 class="progress-score">
    </h4>
  </div>
</template>

<script setup>
import { useScoreStore } from '@/stores/score'

const store = useScoreStore()
</script>

================
File: src/components/TheMenu.vue
================
<template>
  <div class="menu">
    <RouterLink to="/" custom v-slot="{ isActive, navigate }">
      <i
        class="menu-button fa fa-home"
        :class="{ active: isActive }"
        @click="navigate"
        aria-hidden="true"
      ></i>
    </RouterLink>
    
    <RouterLink to="/shop" custom v-slot="{ isActive, navigate }">
      <i
        class="menu-button fa fa-shopping-cart"
        :class="{ active: isActive }"
        @click="navigate"
        aria-hidden="true"
      ></i>
    </RouterLink>

    <RouterLink to="/friends" custom v-slot="{ isActive, navigate }">
      <i
        class="menu-button fa fa-users"
        :class="{ active: isActive }"
        @click="navigate"
        aria-hidden="true"
      ></i>
    </RouterLink>

    <RouterLink to="/tasks" custom v-slot="{ isActive, navigate }">
      <i
        class="menu-button fa fa-bolt"
        :class="{ active: isActive }"
        @click="navigate"
        aria-hidden="true"
      ></i>
    </RouterLink>
  </div>
</template>

<script>
import { RouterLink } from 'vue-router'
</script>

================
File: src/main.js
================
import './assets/main.css'

import { createApp } from 'vue'
import { createPinia } from 'pinia'

import App from './App.vue'
import router from './router'

const app = createApp(App)

app.use(createPinia())
app.use(router)

app.mount('#app')

================
File: src/router/index.js
================
import { createRouter, createWebHistory } from 'vue-router';
import HomeView from '../views/HomeView.vue';
import TasksView from '../views/TasksView.vue'; 
import FriendsView from '../views/FriendsView.vue';
import Shop from '../views/Shop.vue';

const routes = [
  {
    path: '/',
    name: 'home',
    component: HomeView,
  },
  {
    path: '/tasks',
    name: 'tasks',
    component: TasksView, 
  },
  {
    path: '/friends',
    name: 'friends',
    component: FriendsView,
  },
  {
    path: '/shop',
    name: 'shop',
    component: Shop,
  },
];

const router = createRouter({
  history: createWebHistory(import.meta.env.BASE_URL),
  routes,
});

export default router;

================
File: src/services/supabase.js
================
import { createClient } from '@supabase/supabase-js';


const SUPABASE_URL = 'https://irymwiidzovsezjnbiux.supabase.co'
const SUPABASE_API_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImlyeW13aWlkem92c2V6am5iaXV4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzExNTg5MzAsImV4cCI6MjA0NjczNDkzMH0.xbnP-Dp5AeBSAa_hiPWpk3Lv1Dftc1J57kEtv2i9odc'

if (!SUPABASE_URL || !SUPABASE_API_KEY) {
  throw new Error('SUPABASE_URL и SUPABASE_API_KEY обязательны.');
}

const supabase = createClient(SUPABASE_URL, SUPABASE_API_KEY);
export default supabase;

================
File: src/services/telegram.js
================
export function useTelegram() {
  const tg = window.Telegram.WebApp;

  const isLocalTest = !tg.initDataUnsafe?.user;
  const mockUser = {
    id: 666,
    username: "mock_user",
    first_name: "Mock",
    last_name: "User",
  };

  if (isLocalTest) {
    console.warn("Используются мокированные данные пользователя");
  }

  return {
    tg,
    user: isLocalTest ? mockUser : tg.initDataUnsafe?.user || null,
  };
}

================
File: src/stores/app.js
================
// src/stores/app.js
import { defineStore } from 'pinia';
import { useScoreStore } from './score';
import { useTelegram } from '@/services/telegram';
import { registerRef } from '@/api/users';
import {
  getOrCreateUser,
  fetchTasks,
  completeTask,
} from '@/api/app';

export const useAppStore = defineStore('app', {
  state: () => ({
    user: {},
    tasks: [],
  }),
  actions: {
    async init(ref) {
      const { user: telegramUser } = useTelegram();

      this.user = await getOrCreateUser();

      const scoreStore = useScoreStore();

      if (typeof scoreStore.setScore === 'function') {
        scoreStore.setScore(this.user.score);
        scoreStore.setUserId(this.user.id);
      } else {
        console.error('Ошибка: метод setScore не найден в scoreStore');
      }

      // Если есть реферальный код и он не принадлежит самому пользователю
      if (ref && +ref !== +this.user.telegram) {
        await registerRef(telegramUser?.first_name ?? 'kto', ref);
      }
    },

    async completeTask(task) {
      await completeTask(this.user, task);
      // Обновляем данные пользователя после выполнения задачи
      this.user = await getOrCreateUser();
    },

    async fetchTasks() {
      this.tasks = await fetchTasks();
    },
  },
});

================
File: src/stores/score.js
================
// src/stores/score.js
import { defineStore } from 'pinia';
import debounce from 'lodash.debounce';
import supabase from '@/services/supabase';
import { useTelegram } from '@/services/telegram';

const debouncedUpdateScore = debounce(async (score, energy, userId) => {
  try {
    const { error } = await supabase
      .from('users')
      .update({ score, energy })
      .eq('id', userId);

    if (error) {
      console.error('Ошибка при обновлении счёта в Supabase:', error);
    }
  } catch (err) {
    console.error('Ошибка при обновлении счёта в Supabase:', err);
  }
}, 500);

export const useScoreStore = defineStore('score', {
  state: () => ({
    userId: null,
    score: 0,
    energy: 1000,
    maxEnergy: 1000,
    multitapLevel: 0, // Начальный уровень мультитапа - 0
    hasGoldenTrinket: false, // Новое свойство для золотого брелока
  }),

  actions: {
    setUserId(id) {
      this.userId = id;
    },

    setScore(newScore) {
      this.score = newScore;
    },

    async loadUserData() {
      const { user } = useTelegram();
      if (!user || !user.id) {
        console.error('Ошибка: объект user или его id не определены');
        return;
      }

      const telegramId = Number(user.id);
      try {
        const { data, error } = await supabase
          .from('users')
          .select(
            'id, score, energy, max_energy, multitap_level, has_golden_trinket'
          )
          .eq('telegram', telegramId)
          .single();

        if (error) {
          console.error('Ошибка при загрузке данных пользователя из Supabase:', error);
        } else {
          this.userId = data.id;
          this.score = data.score ?? 0;
          this.energy = data.energy ?? 0;
          this.maxEnergy = data.max_energy ?? 1000;
          this.multitapLevel = data.multitap_level ?? 0;
          this.hasGoldenTrinket = data.has_golden_trinket ?? false;

          // Запускаем пассивный заработок, если брелок приобретён
          if (this.hasGoldenTrinket) {
            this.startPassiveEarnings();
          }
        }
      } catch (err) {
        console.error('Ошибка при загрузке данных пользователя:', err);
      }
    },

    async add(taps = 1) {
      const coinsPerTap = this.multitapLevel > 0 ? this.multitapLevel + 1 : 1;

      if (this.energy >= taps) {
        this.score += taps * coinsPerTap;
        this.energy -= taps;

        debouncedUpdateScore(this.score, this.energy, this.userId);
      } else {
        alert('У вас недостаточно энергии!');
      }
    },

    async updateScoreInSupabase() {
      if (!this.userId) return;
      try {
        const { error } = await supabase
          .from('users')
          .update({
            score: this.score,
            max_energy: this.maxEnergy,
            energy: this.energy,
            multitap_level: this.multitapLevel,
            has_golden_trinket: this.hasGoldenTrinket, // Обновляем поле золотого брелока
          })
          .eq('id', this.userId);

        if (error) {
          console.error('Ошибка при обновлении счёта в Supabase:', error);
        }
      } catch (err) {
        console.error('Ошибка при обновлении счёта в Supabase:', err);
      }
    },

    // Метод для пассивного заработка
    startPassiveEarnings() {
      setInterval(() => {
        this.score += 100;
        this.updateScoreInSupabase();
      }, 3600000); // 1 час = 3600000 миллисекунд
    },
  },
});

================
File: src/stores/userStore.js
================
import { defineStore } from 'pinia';
import supabase from '../services/supabase';
import { useTelegram } from '../services/telegram';

export const useUserStore = defineStore('user', {
  state: () => ({
    userId: null,
    dailyMissionLevel: 1,
    dailyMissionDate: null,
  }),

  actions: {
    async loadUserData() {
      const { user } = useTelegram();
      if (!user || !user.id) {
        console.error('Пользователь не авторизован');
        return;
      }

      const telegramId = Number(user.id);

      const { data, error } = await supabase
        .from('users')
        .select('id, daily_mission_level, daily_mission_date')
        .eq('telegram', telegramId)
        .single();

      if (error) {
        console.error('Ошибка загрузки данных пользователя:', error);
        return;
      }

      this.userId = data.id;
      this.dailyMissionLevel = data.daily_mission_level || 1;
      this.dailyMissionDate = data.daily_mission_date;
    },

    async updateDailyMission(newLevel) {
      if (!this.userId) {
        console.error('userId не определен');
        return;
      }

      const today = new Date().toISOString().split('T')[0]; // Формат YYYY-MM-DD

      const { error } = await supabase
        .from('users')
        .update({
          daily_mission_level: newLevel,
          daily_mission_date: today,
        })
        .eq('id', this.userId);

      if (error) {
        console.error('Ошибка обновления ежедневной миссии:', error);
      } else {
        this.dailyMissionLevel = newLevel;
        this.dailyMissionDate = today;
      }
    },
  },
});

================
File: src/views/FriendsView.vue
================
<template>
  <div class="text-content">
    <h1>Друзья</h1>

    <div class="center">
      <button class="referal" @click="copy">{{ referalText }}</button>
    </div>

    <!-- Сообщение, если нет друзей -->
    <h3 v-if="friends.length === 0">
      Поделись ссылкой с друзьями и получи 20% с их дохода
    </h3>

    <!-- Список друзей -->
    <ul class="list" v-if="friends.length > 0">
      <li class="list-item" v-for="friend in friends" :key="friend.id">
        {{ friend.name }}
        <span class="list-btn done">50</span>
      </li>
    </ul>
  </div>
</template>

<script setup>
import { useTelegram } from '@/services/telegram';
import { useAppStore } from '@/stores/app';
import { ref, computed } from 'vue';

const app = useAppStore();
const { user } = useTelegram();

const referalText = ref('Your referal');

// Безопасная обработка данных друзей
const friends = computed(() => {
  // Проверка на существование данных о пользователе и друзьях
  if (app.user && app.user.friends) {
    return Object.keys(app.user.friends).map((id) => ({
      id,
      name: app.user.friends[id] || 'Неизвестный друг', // Подстраховка на случай отсутствия имени
    }));
  }
  return [];
});

function copy() {
  const userId = user?.id || 'unknown';
  navigator.clipboard.writeText(`https://t.me/testikbt_bot?start=${userId}`);
  referalText.value = 'Copied!';
}
</script>

================
File: src/views/HomeView.vue
================
<template>
  <div class="home-container">
    <!-- Верхняя панель с названием бота, профилем и кнопкой "О токене" -->
    <div class="top-bar">
      <div class="profile">
        <img :src="userAvatar" alt="Avatar" class="avatar" />
        <span class="username">{{ userName }}</span>
      </div>
      <h1 class="bot-title">GoldenBust</h1>
      <!-- Добавляем класс 'menu-button' к кнопке "О токене" -->
      <button class="about-token menu-button" @click="openTokenModal">О токене</button>
    </div>

    <!-- Валюта и доходы -->
    <div class="header">
      <img src="../assets/valuta.png" alt="coin" class="valuta-icon" />
      <h2 class="score" id="score">{{ scoreStore.score }}</h2>
      <div class="earnings">
        <div class="earning-item">
          <p>{{ hourlyEarnings }} голда / час</p>
        </div>
        <div class="earning-item">
          <p>{{ tapEarnings }} голда / тап</p>
        </div>
      </div>
    </div>

    <!-- Монетка -->
    <div class="circle">
      <img @click="increment" ref="img" id="circle" src="../assets/tap_bols.png" alt="Click Target" />
    </div>

    <!-- Счетчик энергии -->
    <div class="tap-counter">
      <img src="/src/assets/white_coin_energy.png" alt="Icon" class="tap-icon" />
      <p>{{ scoreStore.energy }} / {{ scoreStore.maxEnergy }}</p>
    </div>

    <!-- Контейнер для конкурса -->
    <div class="contest-container" @click="goToDailyMissions">
      <img src="../assets/white_icon_dollar.png" alt="Конкурс" class="contest-image" />
      <div class="timer">
        <p>Розыгрыш</p>
      </div>
    </div>

    <!-- Кнопка для ежедневных миссий -->
    <button class="daily-missions-button menu-button" @click="openDailyMissions">
      Ежедневные миссии
    </button>

    <!-- Модальное окно для ежедневных миссий -->
    <DailyMissionsModal v-if="isDailyModalOpen" @close="isDailyModalOpen = false" />

    <!-- Модальное окно для "О токене" -->
    <div v-if="isTokenModalOpen" class="modal-overlay" @click="closeTokenModal">
      <div class="modal-content" @click.stop>
        <h2>О токене</h2>
        <p>Здесь можно разместить информацию о токене, его особенности и другие важные детали.</p>
        <!-- Добавляем класс 'menu-button' к кнопке "Закрыть" -->
        <button class="menu-button close-button" @click="closeTokenModal">Закрыть</button>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, onMounted, computed } from 'vue';
import { useScoreStore } from '@/stores/score';
import { useRouter } from 'vue-router';
import { useTelegram } from '@/services/telegram';
import DailyMissionsModal from '@/components/DailyMissionsModal.vue';

const scoreStore = useScoreStore();
const router = useRouter();
const { user } = useTelegram();
const img = ref(null);

// Данные пользователя
const userAvatar = ref('../assets/default-avatar.png');
const userName = ref('Имя пользователя');

// Проверяем, есть ли данные пользователя из Telegram
if (user) {
  userAvatar.value = user.photo_url || '../assets/default-avatar.png';
  userName.value = `${user.first_name || ''} ${user.last_name || ''}`.trim();
}

// Управление модальным окном для "О токене"
const isTokenModalOpen = ref(false);

// Управление модальным окном для ежедневных миссий
const isDailyModalOpen = ref(false);

// Таймер (пример без функциональности)
const timeLeft = ref('00:00:00');

// Добавляем вычисляемое свойство tapEarnings
const tapEarnings = computed(() => {
  // Логика для вычисления дохода за тап
  // Если мультитап не улучшен, доход за тап равен 1
  return scoreStore.multitapLevel > 0 ? scoreStore.multitapLevel + 1 : 1;
});

// Значения доходов (примерные значения, их можно получить из стора или вычислить)
const hourlyEarnings = computed(() => {
  // Логика для вычисления дохода в час
  // Здесь вы можете добавить свою формулу расчета
  return 0; // Пример значения
});

function openTokenModal() {
  isTokenModalOpen.value = true;
}

function closeTokenModal() {
  isTokenModalOpen.value = false;
}

function openDailyMissions() {
  isDailyModalOpen.value = true;
}
function goToDailyMissions() {
  window.open('https://t.me/testimGOLD/2', '_blank'); 
}

// Функция для обработки клика по монетке
function increment(event) {
  const rect = event.target.getBoundingClientRect();
  const offsetX = event.clientX - rect.left - rect.width / 2;
  const offsetY = event.clientY - rect.top - rect.height / 2;

  const DEG = 60;
  const tiltX = (offsetY / rect.height) * DEG;
  const tiltY = (offsetX / rect.width) * -DEG;
  img.value.style.transform = `rotateX(${tiltX}deg) rotateY(${tiltY}deg)`;

  setTimeout(() => {
    img.value.style.transform = 'rotateX(0deg) rotateY(0deg)';
  }, 300);

  const plusOne = document.createElement('div');
  plusOne.classList.add('plus-one');
  plusOne.textContent = `+${tapEarnings.value}`;
  plusOne.style.left = `${event.clientX - rect.left}px`;
  plusOne.style.top = `${event.clientY - rect.top}px`;
  img.value.parentElement.appendChild(plusOne);
  setTimeout(() => plusOne.remove(), 2000);

  // Обновляем расчет количества тапов
  const taps = 1; // За один тап пользователь тратит 1 энергию
  scoreStore.add(taps);
}

// Загружаем данные пользователя при монтировании компонента
onMounted(() => {
  scoreStore.loadUserData();
});
</script>

<style scoped>
/* Стили для модального окна "О токене" и "Ежедневных миссий" */
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5); /* Полупрозрачный фон */
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.modal-content {
  background-color: rgba(42, 41, 46, 0.9); /* Полупрозрачный фон, аналогичный меню */
  padding: 20px 30px;
  border-radius: 12px;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
  text-align: center;
  max-width: 700px; /* Увеличенная максимальная ширина */
  width: 95%; /* Увеличенная ширина */
  height: auto; /* Автоматическая высота */
  max-height: 90vh; /* Максимальная высота до 90% от высоты окна */
  overflow-y: auto; /* Добавить прокрутку, если содержимое превышает высоту */
}

.daily-modal-content {
  padding: 30px 40px; /* Увеличенные внутренние отступы */
}

.menu-button {
  background: rgba(255, 255, 255, 0.2); /* Полупрозрачный белый фон */
  color: #ffffff; /* Белый цвет текста */
  border: none;
  padding: 10px 20px;
  border-radius: 8px;
  cursor: pointer;
  font-size: 16px;
  transition: background-color 0.3s, color 0.3s;
}

.menu-button:hover {
  background-color: rgba(255, 255, 255, 0.2); /* Более яркий фон при наведении */
}

.close-button {
  margin-top: 20px;
}

/* Стили для кнопок миссий */
.missions-grid {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
  margin: 20px 0;
}

.mission-button {
  flex: 1 0 50%; /* Сделать кнопки более широкими */
  padding: 10px;
  border: none;
  border-radius: 8px;
  font-size: 16px;
  cursor: pointer;
  transition: background-color 0.3s, color 0.3s;
}

.mission-button.completed {
  background-color: gray;
  color: white;
}

.mission-button.active {
  background-color: gold;
  color: black;
}

.daily-missions-button {
  background: rgba(42, 41, 46, 0.3); /* Полупрозрачный фон */
  display: flex;
  align-items: center;
  position: absolute;
  bottom: 0;
  left: 1.3rem;
  right: 1.3rem;
  justify-content: space-around;
  height: 40px;
  border-radius: 20px;
  font-size: 1.5rem;
  top: -0.1rem; /* Регулируем положение кнопки над меню */
}


</style>

================
File: src/views/Shop.vue
================
<template>
  <div class="shop-container">
    <h1>Магазин улучшений</h1>
    <div class="items">
      <div class="item" v-for="item in shopItems" :key="item.id">
        <h3>{{ item.name }}</h3>
        <p>{{ item.description }}</p>
        <p>Стоимость: {{ item.cost }} голды</p>
        <button @click="buyItem(item)" :disabled="!canAfford(item.cost)">
          Купить
        </button>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref } from 'vue';
import { useScoreStore } from '@/stores/score';

const scoreStore = useScoreStore();


const shopItems = ref([
  {
    id: 1,
    name: 'Восполнить энергию',
    description: '',
    cost: 1000,
    action: 'restoreEnergy',
  },
  {
    id: 2,
    name: 'Увеличить максимальную энергию до 2000',
    description: 'Увеличивает максимальную энергию до 2000 тапов',
    cost: 10000,
    action: 'increaseMaxEnergyTo2000',
  },
  {
    id: 3,
    name: 'Кастомная кнопка',
    description: 'Кастомизируй внешний вид кнопки для кликов',
    cost: 1000000,
    action: 'customButton',
  },
  {
    id: 4,
    name: 'Удвой заработок',
    description: 'Увеличь количество монет за тап в 2 раза',
    cost: 10000,
    action: 'increaseMultitap',
  },
  // Новые предметы
  {
    id: 5,
    name: 'Увеличить максимальную энергию до 4000',
    description: 'Увеличивает максимальную энергию до 4000 тапов',
    cost: 20000,
    action: 'increaseMaxEnergyTo4000',
  },
  {
    id: 6,
    name: 'Увеличить максимальную энергию до 6000',
    description: 'Увеличивает максимальную энергию до 6000 тапов',
    cost: 30000,
    action: 'increaseMaxEnergyTo6000',
  },
  {
    id: 7,
    name: 'Золотой брелок',
    description: 'Дает пассивный заработок в 100 монет каждый час',
    cost: 50000,
    action: 'goldenTrinket',
  },
]);

function canAfford(cost) {
  return scoreStore.score >= cost;
}

async function buyItem(item) {
  if (!canAfford(item.cost)) {
    alert('Недостаточно коинов для покупки');
    return;
  }

  // Вычитаем стоимость
  scoreStore.score -= item.cost;

  // Выполняем действие
  switch (item.action) {
    case 'restoreEnergy':
      scoreStore.energy = scoreStore.maxEnergy;
      break;
    case 'increaseMaxEnergyTo2000':
      scoreStore.maxEnergy = 2000;
      break;
    case 'increaseMaxEnergyTo4000':
      scoreStore.maxEnergy = 4000;
      break;
    case 'increaseMaxEnergyTo6000':
      scoreStore.maxEnergy = 6000;
      break;
    case 'customButton':
      // Логика кастомизации кнопки
      break;
    case 'increaseMultitap':
      scoreStore.multitapLevel += 1;
      break;
    case 'goldenTrinket':
      scoreStore.hasGoldenTrinket = true;
      break;
    default:
      break;
  }

  // Обновляем данные в Supabase
  await scoreStore.updateScoreInSupabase();
  await scoreStore.updateEnergyInSupabase();
}
</script>

<style scoped>
.shop-container {
  padding: 20px;
}

.items {
  display: flex;
  flex-wrap: wrap;
  gap: 20px;
}

.item {
  flex: 1 0 45%;
  border: 1px solid #ccc;
  padding: 15px;
  border-radius: 5px;
}

.item h3 {
  margin-bottom: 10px;
}

.item button {
  margin-top: 10px;
}
</style>

================
File: src/views/TasksView.vue
================
<template>
  <div class="tasks-wrapper">
    <div class="text-content">
      <h1 class="tasks-header">Стань богаче</h1>
      <h3 v-if="app.tasks.length === 0" class="loading-text">Loading tasks...</h3>
      <ul class="list">
        <li class="list-item" v-for="task in app.tasks" :key="task.id">
          <span class="task-title">{{ task.title }}</span>
          <span>
            <a
              @click.prevent="openTask(task)"
              target="_blank"
              class="list-btn"
              :class="{ done: app.user?.tasks?.[task.id] }"
            >
              {{ task.amount }}
            </a>
          </span>
        </li>
      </ul>
    </div>
  </div>
</template>

<script setup>
import { useTelegram } from '@/services/telegram';
import { useAppStore } from '@/stores/app';
import { onMounted } from 'vue';

const { tg } = useTelegram();
const app = useAppStore();

onMounted(() => {
  app.fetchTasks();
});

async function openTask(task) {
  await app.completeTask(task);
  if (task.url.includes('t.me')) {
    tg.openTelegramLink(task.url);
  } else {
    tg.openLink(task.url);
  }
}
</script>

<style scoped>

/* Оформление блока задач с полупрозрачным фоном */
.text-content {
  background-color: rgba(255, 255, 255, 0.2); /* Полупрозрачный белый фон */
  padding: 20px 30px;
  border-radius: 12px;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
  text-align: center;
  max-width: 400px;
  width: 100%;
}

/* Заголовок */
.tasks-header {
  font-size: 26px;
  font-weight: bold;
  margin-bottom: 16px;
  color: #ffffff;
}

/* Текст загрузки */
.loading-text {
  font-size: 18px;
  color: #777;
}

/* Стили списка */
.list {
  list-style: none;
  padding: 0;
  margin: 0;
}

.list-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 10px 15px;
  margin-bottom: 10px;
  background-color: rgba(255, 255, 255, 0.01);
  border-radius: 8px;

}

.list-item:hover {
  background-color: rgba(255, 255, 255, 0.2);
}

/* Название задачи */
.task-title {
  font-size: 16px;
  color: #f3f3f3;
}

/* Кнопки */
.list-btn {
  text-decoration: none;
  color: #000000;
  font-weight: bold;
  padding: 6px 12px;
  background-color: rgba(255, 255, 255, 0.2);
  border: none;
  border-radius: 8px;
  cursor: pointer;

}

.list-btn:hover {
  background-color: inherit
}

.list-btn.done {
  color: #030303;
  background-color: inherit;
}

.list-btn.done:hover {
  background-color: #28a745;
  color: #fff;
}
</style>

================
File: vite.config.js
================
import { fileURLToPath, URL } from 'node:url'

import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [
    vue(),
  ],
  resolve: {
    alias: {
      '@': fileURLToPath(new URL('./src', import.meta.url))
    }
  }
})
